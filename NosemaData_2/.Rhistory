envdist <- vegdist(x1, method= "jaccard", na.rm=TRUE)
AD2 <- adonis(envdist~Origin, data=Time2)
AD2
# create dissimalarity matrix
Mig3x <- na.omit(Time2)
x1 <- dplyr::select(Mig3x, Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)
# run PERMNAOVA
envdist <- vegdist(x1, method= "jaccard", na.rm=TRUE)
AD2 <- adonis(envdist~Origin, data=Mig3x)
AD2
# create dissimalarity matrix
LoCal2x <- na.omit(Time2)
x1 <- dplyr::select(LoCal2x, Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)
# run PERMNAOVA
envdist <- vegdist(x1, method= "jaccard", na.rm=TRUE)
AD2 <- adonis(envdist~Origin, data=LoCal2x)
AD2
# create dissimalarity matrix
LoCal2x <- na.omit(Time2)
Dis2 <- dplyr::select(LoCal2x, Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)
# run PERMNAOVA
envdist <- vegdist(Dis2, method= "jaccard", na.rm=TRUE)
AD2 <- adonis(envdist~Origin, data=LoCal2x)
AD2
# create dissimalarity matrix
# create matrix for PERM
Mig2x <- na.omit(Time1)
Dis1 <- dplyr::select(Time1, Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)
# run PERMANOVA
envdist1 <- vegdist(Dis1, method= "jaccard", na.rm=TRUE)
AD1 <- adonis(envdist1~Origin, data=Time1)
AD1
# create dissimalarity matrix
# create matrix for PERM
Mig2x <- na.omit(Time1)
Dis1 <- dplyr::select(Mig2x, Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)
# run PERMANOVA
envdist1 <- vegdist(Dis1, method= "jaccard", na.rm=TRUE)
AD1 <- adonis(envdist1~Origin, data=Mig2x)
AD1
# run a PCA
PCA3 <- prcomp(x[,2:9], scale. = T)
Dis1
# run a PCA
PCA3 <- prcomp(Dis1, scale. = T)
# prepare PCA data frame
PC1 <- as.vector(PCA3$x[,1])
PC2 <- as.vector(PCA3$x[,2])
Treat <- Mig2x$Treatment
dat1 <- data.frame(PC1, PC2, Treat)
PCA3$x
LoCal1x$Origin
# create dissimalarity matrix
# create matrix for PERM
LoCal1x <- na.omit(Time1)
Dis1 <- dplyr::select(LoCal1x, Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)
# run PERMANOVA
envdist1 <- vegdist(Dis1, method= "jaccard", na.rm=TRUE)
AD1 <- adonis(envdist1~Origin, data=LoCal1x)
AD1
# prepare PCA data frame
PC1 <- as.vector(PCA3$x[,1])
PC2 <- as.vector(PCA3$x[,2])
Treat <- LoCal1x$Origin
dat1 <- data.frame(PC1, PC2, Treat)
# graph for PCA
PCA2 <- ggplot(dat1, aes(PC1,PC2, color=Treat))+geom_point() + theme_minimal(base_size = 17) + scale_colour_manual(values = c("slategrey", "red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
PCA2
PCA3
# graph for PCA
PCA2 <- ggplot(dat1, aes(PC1,PC2, color=Treat))+geom_point() + theme_minimal(base_size = 17) + scale_colour_manual(values = c("slategrey", "red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
PCA2
# run a PCA
PCA3 <- prcomp(Dis1, scale. = T)
# prepare PCA data frame
PC1 <- as.vector(PCA3$x[,1])
PC2 <- as.vector(PCA3$x[,2])
Origin <- LoCal1x$Origin
dat1 <- data.frame(PC1, PC2, Origin)
# graph for PCA
PCA2 <- ggplot(dat1, aes(PC1,PC2, color=Treat))+geom_point() + theme_minimal(base_size = 17) + scale_colour_manual(values = c("slategrey", "red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
PCA2
# run a PCA
PCA3 <- prcomp(Dis1, scale. = T)
# prepare PCA data frame
PC1 <- as.vector(PCA3$x[,1])
PC2 <- as.vector(PCA3$x[,2])
Origin <- LoCal1x$Origin
dat1 <- data.frame(PC1, PC2, Origin)
# graph for PCA
PCA2 <- ggplot(dat1, aes(PC1,PC2, color=Origin))+geom_point() + theme_minimal(base_size = 17) + scale_colour_manual(values = c("slategrey", "red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
PCA2
# graph for PCA
PCA2 <- ggplot(dat1, aes(PC1,PC2, color=Origin))+geom_point() + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
PCA2
# graph for PCA
PCA2 <- ggplot(dat1, aes(PC1,PC2, color=Origin))+geom_point(size=3) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
PCA2
# graph for PCA
PCA2 <- ggplot(dat1, aes(PC1,PC2, color=Origin))+geom_point(size=2) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
PCA2
# graph for PCA
PCA2 <- ggplot(dat1, aes(PC1,PC2, color=Origin))+geom_point(size=2.5) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
PCA2
# PCA analysis
PC <- prcomp(Disc2, scale. = T)
# PCA analysis
PC <- prcomp(Dis2, scale. = T)
# prepare PCA data frame
PC1 <- as.vector(PC$x[,1])
PC2 <- as.vector(PC$x[,2])
Origin <- LoCal2x$Origin
dat <- data.frame(PC1, PC2, Origin)
# graph for PCA
PCA1 <- ggplot(dat, aes(PC1,PC2, color=Origin))+geom_point(size=2.5) + theme_minimal(base_size = 18) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
PCA1
# graph for PCA
PCA1 <- ggplot(dat, aes(PC1,PC2, color=Origin))+geom_point(size=2.5) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
PCA1
# run nMDS
MDS1 <- metaMDS(envdist1, center=TRUE, autotransform = FALSE)
#Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores1 <- as.data.frame(scores(MDS1))
data.scores1$Treatment <- LoCal1x$Origin
NMDS2 <- ggplot(data.scores1, aes(NMDS1,NMDS2, color=Treatment))+geom_point() + theme_minimal(base_size = 17) + scale_colour_manual(values = c("slategrey", "red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
NMDS2
# run nMDS model:
MDS <- metaMDS(envdist, center=TRUE, autotransform = FALSE)
#Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores <- as.data.frame(scores(MDS))
data.scores$Treatment <- LoCal2x$Origin
# graph for nMDA
NMDS3 <- ggplot(data.scores, aes(NMDS1,NMDS2, color=Treatment))+geom_point() + theme_minimal(base_size = 17) + scale_colour_manual(values = c("slategrey", "red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
NMDS3
# graph for nMDA
NMDS3 <- ggplot(data.scores, aes(NMDS1,NMDS2, color=Origin))+geom_point(size=2.5) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
NMDS3
install.packages("candisc")
# run nMDS
MDS1 <- metaMDS(envdist1, center=TRUE, autotransform = FALSE)
#Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores1 <- as.data.frame(scores(MDS1))
data.scores1$Treatment <- LoCal1x$Origin
NMDS2 <- ggplot(data.scores1, aes(NMDS1,NMDS2, color=Origin))+geom_point(size=2.5) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
NMDS2
# run nMDS
MDS1 <- metaMDS(envdist1, center=TRUE, autotransform = FALSE)
#Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores1 <- as.data.frame(scores(MDS1))
data.scores1$Treatment <- LoCal1x$Origin
NMDS2 <- ggplot(data.scores1, aes(NMDS1,NMDS2, color=Origin))+geom_point(size=2.5) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
NMDS2
# run nMDS
MDS1 <- metaMDS(envdist1, center=TRUE, autotransform = FALSE)
#Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores1 <- as.data.frame(scores(MDS1))
# run nMDS
MDS1 <- metaMDS(envdist1, center=TRUE, autotransform = FALSE)
#Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores1 <- as.data.frame(scores(MDS1))
data.scores1$Origin <- LoCal1x$Origin
NMDS2 <- ggplot(data.scores1, aes(NMDS1,NMDS2, color=Origin))+geom_point(size=2.5) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
NMDS2
# run nMDS model:
MDS <- metaMDS(envdist, center=TRUE, autotransform = FALSE)
#Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores <- as.data.frame(scores(MDS))
data.scores$Treatment <- LoCal2x$Origin
# graph for nMDA
NMDS3 <- ggplot(data.scores, aes(NMDS1,NMDS2, color=Origin))+geom_point(size=2.5) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
NMDS3
scores(MDS)
# run nMDS
MDS1 <- metaMDS(envdist1, center=TRUE, autotransform = FALSE)
#Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores1 <- as.data.frame(scores(MDS1))
data.scores1$Origin <- LoCal1x$Origin
data.scores1
# run nMDS
MDS1 <- metaMDS(envdist1, center=TRUE, autotransform = FALSE)
#Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores1 <- as.data.frame(scores(MDS1))
data.scores1$Origin <- LoCal1x$Origin
NMDS2 <- ggplot(data.scores1, aes(NMDS1,NMDS2, color=Origin))+geom_point(size=2.5) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
NMDS2
scores(MDS1)
# run nMDS
MDS1 <- metaMDS(envdist1, center=TRUE, autotransform = FALSE)
d <- scores(MDS1)
data.scores1 <- as.data.frame(d)
data.scores1$Origin <- LoCal1x$Origin
NMDS2 <- ggplot(data.scores1, aes(NMDS1,NMDS2, color=Origin))+geom_point(size=2.5) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
NMDS2
# Clear memory of characters:
ls()
rm(list=ls())
# Set Working Directory:
setwd("~/BurnhamAlexPrivate/LocalCaliforniaStudy_Hamilton")
# Read in Data:
data <- read.table("LoCalMV.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
data$logDWV <- log(data$DWV + 1)
data$logBQCV <- log(data$BQCV + 1)
data$logIAPV <- log(data$IAPV + 1)
data$logNosema <- log(data$Nosema + 1)
# split data into two time points:
x <- split(data, data$Time)
Time1 <- x$`1`
Time2 <- x$`2`
# required packages:
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(MASS)
library(vegan)
library(factoextra)
library(candisc)
# run LDA
time1 <- lda(Origin~ Pollen + logBQCV + logIAPV + logDWV + Varroa + logNosema + Mass + Brood, data=Time1, na.action="na.omit")
plot(time1)
# creeat data set that includes only variables of interest:
x <- dplyr::select(Time1, Origin, Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)
# create predictions based on confusion matrix
predictions <- predict(time1, x[,2:9])$class
# summarize accuracy
cm <- table(predictions, x$Origin)
prop.table(cm,1)
# create dissimalarity matrix
# create matrix for PERM
LoCal1x <- na.omit(Time1)
Dis1 <- dplyr::select(LoCal1x, Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)
# run PERMANOVA
envdist1 <- vegdist(Dis1, method= "jaccard", na.rm=TRUE)
AD1 <- adonis(envdist1~Origin, data=LoCal1x)
AD1
# run LDA
time2 <- lda(Origin~ Pollen + logBQCV + logIAPV + logDWV + Varroa + logNosema + Mass + Brood, data=Time2, na.action="na.omit")
plot(time2)
x1 <- dplyr::select(Time2, Origin, Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)
predictions2 <- predict(time2, x1[,2:9])$class
# summarize accuracy
cm1 <- table(predictions2, x1$Origin)
prop.table(cm1,1)
# create dissimalarity matrix
LoCal2x <- na.omit(Time2)
Dis2 <- dplyr::select(LoCal2x, Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)
# run PERMNAOVA
envdist <- vegdist(Dis2, method= "jaccard", na.rm=TRUE)
AD2 <- adonis(envdist~Origin, data=LoCal2x)
AD2
# run a PCA
PCA3 <- prcomp(Dis1, scale. = T)
# prepare PCA data frame
PC1 <- as.vector(PCA3$x[,1])
PC2 <- as.vector(PCA3$x[,2])
Origin <- LoCal1x$Origin
dat1 <- data.frame(PC1, PC2, Origin)
# graph for PCA
PCA2 <- ggplot(dat1, aes(PC1,PC2, color=Origin))+geom_point(size=2.5) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
PCA2
# PCA analysis
PC <- prcomp(Dis2, scale. = T)
# prepare PCA data frame
PC1 <- as.vector(PC$x[,1])
PC2 <- as.vector(PC$x[,2])
Origin <- LoCal2x$Origin
dat <- data.frame(PC1, PC2, Origin)
# graph for PCA
PCA1 <- ggplot(dat, aes(PC1,PC2, color=Origin))+geom_point(size=2.5) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
PCA1
# run nMDS
MDS1 <- metaMDS(envdist1, center=TRUE, autotransform = FALSE)
#Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores1 <- as.data.frame(scores(MDS1))
MDS1
scores(MDS1)
MDS1$
esd
envdist1
library(vegan)
#Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores <- as.data.frame(vegan::scores(MDS))
# run nMDS model:
MDS <- metaMDS(envdist, center=TRUE, autotransform = FALSE)
#Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores <- as.data.frame(vegan::scores(MDS))
data.scores$Origin <- LoCal2x$Origin
# graph for nMDA
NMDS3 <- ggplot(data.scores, aes(NMDS1,NMDS2, color=Origin))+geom_point(size=2.5) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
NMDS3
scor
PCA1
PC
PC$x
plot(time1)
plot(time1, col = c("blue", "red"))
plot(time1, col = c("blue"))
setwd("~/AndreCollaborations/QueenExperimentBurnham")
# USEING CANDISC
lm.mod <- lm(cbind(Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)~Origin, data=Time1, na.omit=TRUE)
# USEING CANDISC
lm.mod <- lm(cbind(Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)~Origin, data=Time1)
anova(lm.mod, test="Wilks")
can.mod <- candisc(lm.mod, term="Treatment")
can.mod <- candisc(lm.mod, term="Origin")
can.mod
summary(can.mod)
# USEING CANDISC
lm.mod2 <- lm(cbind(Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)~Origin, data=Time2)
anova(lm.mod2, test="Wilks")
can.mod2 <- candisc(lm.mod2, term="Origin")
can.mod2
summary(can.mod2)
# Clear memory of characters:
ls()
rm(list=ls())
# Set Working Directory:
setwd("~/BurnhamAlexPrivate/LocalCaliforniaStudy_Hamilton")
# Read in Data:
data <- read.table("LoCalMV.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
data$logDWV <- log(data$DWV + 1)
data$logBQCV <- log(data$BQCV + 1)
data$logIAPV <- log(data$IAPV + 1)
data$logNosema <- log(data$Nosema + 1)
# split data into two time points:
x <- split(data, data$Time)
Time1 <- x$`1`
Time2 <- x$`2`
# required packages:
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(MASS)
library(vegan)
library(factoextra)
library(candisc)
# USEING CANDISC
lm.mod <- lm(cbind(Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)~Origin, data=Time1)
anova(lm.mod, test="Wilks")
can.mod <- candisc(lm.mod, term="Origin")
can.mod
summary(can.mod)
# run LDA
time1 <- lda(Origin~ Pollen + logBQCV + logIAPV + logDWV + Varroa + logNosema + Mass + Brood, data=Time1, na.action="na.omit")
plot(time1, col = c("blue"))
# creeat data set that includes only variables of interest:
x <- dplyr::select(Time1, Origin, Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)
# create predictions based on confusion matrix
predictions <- predict(time1, x[,2:9])$class
# summarize accuracy
cm <- table(predictions, x$Origin)
prop.table(cm,1)
# create dissimalarity matrix
# create matrix for PERM
LoCal1x <- na.omit(Time1)
Dis1 <- dplyr::select(LoCal1x, Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)
# run PERMANOVA
envdist1 <- vegdist(Dis1, method= "jaccard", na.rm=TRUE)
AD1 <- adonis(envdist1~Origin, data=LoCal1x)
AD1
# USEING CANDISC
lm.mod2 <- lm(cbind(Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)~Origin, data=Time2)
anova(lm.mod2, test="Wilks")
can.mod2 <- candisc(lm.mod2, term="Origin")
can.mod2
summary(can.mod2)
# run LDA
time2 <- lda(Origin~ Pollen + logBQCV + logIAPV + logDWV + Varroa + logNosema + Mass + Brood, data=Time2, na.action="na.omit")
plot(time2, col = c("blue"))
x1 <- dplyr::select(Time2, Origin, Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)
predictions2 <- predict(time2, x1[,2:9])$class
# summarize accuracy
cm1 <- table(predictions2, x1$Origin)
prop.table(cm1,1)
# create dissimalarity matrix
LoCal2x <- na.omit(Time2)
Dis2 <- dplyr::select(LoCal2x, Pollen, logBQCV, logIAPV, logDWV, Varroa, logNosema, Mass, Brood)
# run PERMNAOVA
envdist <- vegdist(Dis2, method= "jaccard", na.rm=TRUE)
AD2 <- adonis(envdist~Origin, data=LoCal2x)
AD2
# run nMDS
MDS1 <- metaMDS(envdist1, center=TRUE, autotransform = FALSE)
#Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores1 <- as.data.frame(vegan::scores(MDS1))
data.scores1$Origin <- LoCal1x$Origin
NMDS2 <- ggplot(data.scores1, aes(NMDS1,NMDS2, color=Origin))+geom_point(size=2.5) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
NMDS2
# run nMDS model:
MDS <- metaMDS(envdist, center=TRUE, autotransform = FALSE)
#Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores <- as.data.frame(vegan::scores(MDS))
data.scores$Origin <- LoCal2x$Origin
# graph for nMDA
NMDS3 <- ggplot(data.scores, aes(NMDS1,NMDS2, color=Origin))+geom_point(size=2.5) + theme_minimal(base_size = 19) + scale_colour_manual(values = c("red", "blue")) + theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) + stat_ellipse(show.legend = FALSE, level=.7)
NMDS3
# Set Working Directory:
setwd("~/Desktop/BCOR102/GroupSort")
# read in data:
names <- read.csv("102Roster2017F.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
sort.students<-function(names,groupnum){
groupsize<-(length(names)/groupnum) # same as floor(length(names)/groupsize)
groups<-rep(1:groupsize,length.out=length(names))
split(sample(names),groups)
}
#student names
names<-names$NAME
#See groups
sort.students(names,groupnum=3.5)
#See groups
sort.students(names,groupnum=3)
#########################################
# Don't forget to set your working directory
# go to "session tab"
# go to "set working directory"
# go to "select directoy"
# select the folder where the raw data file is.
setwd("~/Desktop/BCOR102/Gall")
##########################################
Gall <- read.csv(file ="Gall_RawData.csv")
attach(Gall)
by(Height, GallState, mean)
by(Diameter, GallState, mean)
boxplot(Height ~ GallState,
ylab="Gall Height (cm)",
xlab="State of Fly",
col= c("gray", "blue", "green", "yellow")
)
boxplot(Diameter ~ GallState,
ylab="Gall Diameter (mm)",
xlab="State of Fly",
col= c("gray", "blue", "green", "yellow")
)
ANOVA_GallHeight<-aov(Height ~ GallState)
summary(ANOVA_GallHeight)
ANOVA_GallDiameter<-aov(Diameter ~ GallState)
summary(ANOVA_GallDiameter)
# state these reuslts in your resutls section
TukeyHSD(ANOVA_GallHeight)
TukeyHSD(ANOVA_GallDiameter)
# Clear memory of characters
ls()
rm(list=ls())
#Preliminaries
library(RColorBrewer)
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(MASS)
library(scales)
# set working directory
setwd("~/Dissertation/NosemaData_2")
# read in data
NosemaDF <- read.table("~/BurnhamAlexPrivate/BombusNosemaSurvey2014/Nosema_Data_R.csv",
header=TRUE,
sep=",",
stringsAsFactors=FALSE)
# new variable for log nosema:
NosemaDF$LogNosema <- log(NosemaDF$NosemaAverage + 1)
NosemaDF$LogSucrose <- log(NosemaDF$Sucrose + 1)
NosemaDF<-NosemaDF[!NosemaDF$Species==("Gris. "),]
NosemaDF<-NosemaDF[!NosemaDF$Species==("Terr."),]
NosemaDF<-NosemaDF[!NosemaDF$Species==("Ferv. "),]
# summary stats for plotting purposes:
VirusSummary <- ddply(NosemaDF, c("Species"), summarise,
n = length(NosemaPA),
mean = mean(NosemaPA, na.rm = TRUE),
sd = sd(NosemaPA, na.rm = TRUE),
se = sd / sqrt(n))
# color pallette for graphics:
colors<-colorRampPalette(brewer.pal(9,"Blues"))(5)
colors<-rev(colors)
ggplot(VirusSummary, aes(x=Species, y=mean, fill=colors)) + geom_bar(stat="identity", col="black", position=position_dodge()) + geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.4, position=position_dodge(.9)) + scale_fill_manual(values=colors)  + labs(x="Species", y = "Nosema Prevalence") + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
# summary stats for plotting purposes:
VirusSummary1 <- ddply(NosemaDF, c("Caste"), summarise,
n = length(NosemaPA),
mean = mean(NosemaPA, na.rm = TRUE),
sd = sd(NosemaPA, na.rm = TRUE),
se = sd / sqrt(n))
# color pallette for graphics:
colors1<-colorRampPalette(brewer.pal(9,"Blues"))(3)
colors1<-rev(colors1)
# graphics for caste
ggplot(VirusSummary1, aes(x=Caste, y=mean, fill=colors1)) + geom_bar(stat="identity", col="black", position=position_dodge()) + geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.4, position=position_dodge(.9)) + scale_fill_manual(values=colors1)  + labs(x="Caste", y = "Nosema Prevalence") + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3)) + coord_cartesian(ylim = c(0, .5)) + scale_y_continuous(labels = scales::percent)
# prevalence:
NosModPrev <- glmer(data=NosemaDF, NosemaPA~Caste+Species+Sucrose+hbPA + (1|Site), family = binomial(link = "logit"))
Anova(NosModPrev)
# load:
NosModLoad <- lmer(data=NosemaDF, LogNosema~Caste + Species + Sucrose + (1|Site))
Anova(NosModLoad)
# load of postive:
NosemaDFno0 <- NosemaDF[!NosemaDF$LogNosema==(0),]
NosModLoadno0  <- glmer(data=NosemaDFno0, LogNosema~Caste+Species+LogSucrose + (1|Site), family = Gamma)
Anova(NosModLoadno0)
r <- ddply(NosemaDFno0, c("Caste"), summarise,
n = length(LogNosema),
mean = mean(LogNosema, na.rm = TRUE),
sd = sd(LogNosema, na.rm = TRUE),
se = sd / sqrt(n))
z <- ddply(NosemaDFno0, c("Species"), summarise,
n = length(LogNosema),
mean = mean(LogNosema, na.rm = TRUE),
sd = sd(LogNosema, na.rm = TRUE),
se = sd / sqrt(n))
stepAIC(NosModLoadno0)
stepAIC(NosModLoadno0, direction = "backward")
stepAIC(NosModLoadno0, direction = "both")
