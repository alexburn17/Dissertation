#Need rownames and all.x=TRUE because data frames are different sizes.
BombSurvDF$variable <- rownames(BombSurvDF)
BombSurv <- merge(BombSurvDF, EcoSurvDF, all.x =TRUE)
# remove temporary column - "variable" from DF:
BombSurv <- select(BombSurv, -variable)
# set constant values for genome copies per bee calculations:
crude_extr <- 100
eluteRNA <- 50
total_extr_vol <- 600
number_bees <- 1
cDNA_eff <- 0.1
rxn_vol <- 3
# create column for genome copies per bee:
BombSurv$genome_copbee <- ((((((BombSurv$quantity_mean / cDNA_eff) / rxn_vol) * BombSurv$dil.factor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
# line turns NAs into 0s:
#BombSurv$genome_copbee[is.na(BombSurv$genome_copbee)] <- 0
# pull only actin values out of dataframe
ActinOnly <- BombSurv[which(BombSurv$target_name=="ACTIN"),]
# create DF of ACTIN genome copies and lab ID:
ActinDF <- data.frame(ActinOnly$sample_name, ActinOnly$genome_copbee)
colnames(ActinDF) <- c("sample_name", "ACT_genome_copbee")
# merge ACTIN dataframe with main dataframe:
#Need rownames and all.x=TRUE because data frames are different sizes.
BombSurv <- merge(BombSurv, ActinDF, by="sample_name")
# find mean of all ACTIN values:
ActinMean <- mean(ActinOnly$genome_copbee, na.rm = TRUE)
# create column for normalized genome copies per bee:
BombSurv$norm_genome_copbee <- (BombSurv$genome_copbee/BombSurv$ACT_genome_copbee)*ActinMean
#----------------------------------------------------------------------
#Working with the HB data:
# take only columns that we want:
HbDF <- select(HbDF, sample_name, target_name, Ct_mean_hb, Ct_sd, quantity_mean, quantity_sd, run)
# remove duplicate rows from dataframe:
HbDF<-HbDF[!duplicated(HbDF), ]
# remove NTC rows from dataframe:
HbDF<-HbDF[!(HbDF$sample_name=="No Sample"),]
#merge dilutions with PCR data by sample name
HbDF <- merge(HbDF, EcoHbDF, by="sample_name")
# set constant values for genome copies per bee calculations:
crude_extr <- 100
eluteRNA <- 50
GITCperbee <- 200
number_bees <- 4
cDNA_eff <- 0.1
rxn_vol <- 3
#create column for total_extr_vol
HbDF$total_extr_vol <- (GITCperbee * HbDF$num_bees)
# create column for genome copies per bee:
HbDF$genome_copbeeHB <- ((((((HbDF$quantity_mean / cDNA_eff) / rxn_vol) * HbDF$dil.factor) * eluteRNA) / crude_extr) * HbDF$total_extr_vol) / HbDF$num_bees
#----------------------------------------------------------------------
# pull only actin values out of dataframe
ActinOnly <- HbDF[which(HbDF$target_name=="ACTIN"),]
# create DF of ACTIN genome copies and lab ID:
ActinDF <- data.frame(ActinOnly$sample_name, ActinOnly$genome_copbeeHB)
colnames(ActinDF) <- c("sample_name", "ACT_genome_copbeeHB")
# merge ACTIN dataframe with main dataframe:
#Need rownames and all.x=TRUE because data frames are different sizes.
HbDF <- merge(HbDF, ActinDF, by="sample_name")
# find mean of all ACTIN values:
ActinMean <- mean(ActinOnly$genome_copbeeHB, na.rm = TRUE)
# create column for normalized genome copies per bee:
HbDF$norm_genome_copbeeHB <- (HbDF$genome_copbeeHB/HbDF$ACT_genome_copbeeHB)*ActinMean
HbDF <- select(HbDF, site, target_name, norm_genome_copbeeHB,Ct_mean_hb)
#Make column for all honey bee virus data that identifies each as "honey bees collected and tested"
HbDF$HBCollected <- rep(1,length(HbDF$site))
BombSurv <- merge(BombSurv, HbDF, by=c("site","target_name"), all.x=TRUE, all.y=FALSE)
head(select(BombSurv, site, norm_genome_copbeeHB, sample_name, target_name), 200)
# make NAs 0
BombSurv$genome_copbee[is.na(BombSurv$genome_copbee)] <- 0
BombSurv$norm_genome_copbee[is.na(BombSurv$norm_genome_copbee)] <- 0
BombSurv$norm_genome_copbeeHB[is.na(BombSurv$norm_genome_copbeeHB)] <-0
# create a binary vector in dataframe
BombSurv$virusBINY_PreFilter <- ifelse(BombSurv$genome_copbee > 0, 1, 0)
#------------------------------------------------------------------------
#sam is making a dataframe to figure out which samples are problematic:
Sammy<-table(BombSurv$sample_name)
sammyscounts <-data.frame(Sammy)
head(sammyscounts)
sammy_is_so_smart <- sammyscounts[which(sammyscounts$Freq!=4),]
# rename column names! Never forget this one!
colnames(sammy_is_so_smart)<- c("ID","Freq")
#------------------------------------------------------------------------
# 2015 Bombus Survey PCR results:
# Data Cleaning Functions:
# P. Alexander Burnham
# 10, October 2016
#------------------------------------------------------------------------
# this function puts NAs in vectors where values parameters are not met then remvoes those columns, cleaning the data frame:
Burnhams_Fabulous_Data_Cleanser <- function(dataframe=BombSurv, variable=BombSurv$target_name){
splitDF <- split(BombSurv, BombSurv$target_name)
# filtering out for CT values (bombus) that are outside limit of detection, assigning either a 1 or 0 in a new column
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$Ct_mean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$Ct_mean > 32.525, 0, 1)
splitDF$IAPV$virusBINY  <- ifelse(splitDF$IAPV$Ct_mean > 30.796, 0, 1)
x <- rbind(splitDF$DWV,splitDF$BQCV,splitDF$IAPV)
return(x)}
# END OF FUNCTION
# calling Burnhams_Fabulous_Data_Cleanser created above and using it on BombSurv data frame:
keptstuff <- Burnhams_Fabulous_Data_Cleanser(BombSurv)
# make NAs 0 in virusBINY
keptstuff$virusBINY [is.na(keptstuff$virusBINY)] <- 0
#----------------------------------------------------------------------
#making genome copies 0 if CT value is below the limit of detection (Bombus)
# splitting dataframe by target name
splitkeptstuff <- split(keptstuff, keptstuff$target_name)
# make DWV norm_genome_copbee 0 if Ct value is > 32.918
splitkeptstuff$DWV$norm_genome_copbee[which(splitkeptstuff$DWV$Ct_mean > 32.918)] <- 0
# make BQCV norm_genome_copbee 0 if Ct value is > 32.525
splitkeptstuff$BQCV$norm_genome_copbee[which(splitkeptstuff$BQCV$Ct_mean > 32.525)] <- 0
# make IAPV norm_genome_copbee 0 if Ct value is > 30.796
splitkeptstuff$IAPV$norm_genome_copbee[which(splitkeptstuff$IAPV$Ct_mean > 30.796)] <- 0
# merge split dataframe back into "BombSurv" dataframe:
BombSurv <- rbind(splitkeptstuff$DWV, splitkeptstuff$BQCV, splitkeptstuff$IAPV)
#------------------------------------------------------------------------
#making genome copies 0 if CT value is below the limit of detection (apis)
# make DWV norm_genome_copbee 0 if Ct value is > 32.918
splitkeptstuff$DWV$norm_genome_copbeeHB[which(splitkeptstuff$DWV$Ct_mean_hb > 32.918)] <- 0
# make BQCV norm_genome_copbee 0 if Ct value is > 32.525
splitkeptstuff$BQCV$norm_genome_copbeeHB[which(splitkeptstuff$BQCV$Ct_mean_hb > 32.525)] <- 0
# make IAPV norm_genome_copbee 0 if Ct value is > 30.796
splitkeptstuff$IAPV$norm_genome_copbeeHB[which(splitkeptstuff$IAPV$Ct_mean_hb > 30.796)] <- 0
# merge split dataframe back into "BombSurv" dataframe:
BombSurv <- rbind(splitkeptstuff$DWV, splitkeptstuff$BQCV, splitkeptstuff$IAPV)
#-----------------------------------------------------------------------
#Change genome copy HB from 0 to NA for sites with no HB virus data (no hbs collected) using column HBCollected
BombSurv$norm_genome_copbeeHB <- ifelse(BombSurv$HBCollected == "NA", "NA", BombSurv$norm_genome_copbeeHB)
#View(BombSurv)
#-----------------------------------------------------------------------
# adding bee abundance data to BombSurv
#looking at proportion of bees that are honey bees from bee abundance data
BeeAbun <- read.csv("BeeAbun.csv", header = TRUE)
#Making new column for apis=1
BeeAbun$HB <- ifelse(BeeAbun$Morpho_species == "apis", 1, 0)
#using ddply to find proportion (mean)
BeeAbunSum<- ddply(BeeAbun, c("site"), summarise,
HB_Abun = mean(HB, na.rm=TRUE))
#merge HB proportion data to bombus data
BombSurv <- merge(BombSurv, BeeAbunSum, by=c("site"), all.x=TRUE, all.y=FALSE)
#---------------------------------------------------------------------------
BombSurvSplit <- split(BombSurv, BombSurv$target_name)
BombSurvSplit$IAPV$HBSiteBin <- rep(NA, length(BombSurvSplit$IAPV$virusBINY))
BombSurvSplit$BQCV$HBSiteBin <- rep(NA, length(BombSurvSplit$BQCV$virusBINY))
BombSurvSplit$DWV$HBSiteBin <- ifelse(log(BombSurvSplit$DWV$norm_genome_copbeeHB) > 15, "High", "Low")
BombSurv <- rbind(BombSurvSplit$DWV, BombSurvSplit$BQCV, BombSurvSplit$IAPV)
BombSurv <- merge(BombSurv, Diversity, by=c("site"), all.x=TRUE, all.y=FALSE)
head(BombSurv)
write.csv(BombSurv, file = "BombSurv.csv")
BombSurv <- read.table("BombSurv.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurvDF
head(BombSurv)
split(BombSurv, BombSurv$target_name)
x <- split(BombSurv, BombSurv$target_name)
BQCV <- x$BQCV
DWV <- x$DWV
IAPV <- x$IAPV
BQCV
length(IAPV)
BQCV
length(IAPV$site)
length(IAPV$site)
length(DWV$site)
length(BQCV$site)
merge(DWV, IAPV)
# Clear memory of characters
ls()
rm(list=ls())
ls()
setwd("~/Desktop/RScripts/NosemaData_2")
setwd("~/Desktop/RScripts/NosemaData_2")
# read in data
NosemaDF <- read.table("Nosema_Data_R.csv",header=TRUE,row.names=1,sep=",",stringsAsFactors=FALSE)
#attatch column names to column data
attach(NosemaDF)
#-------------------------------------------------------------------
#histogram of Nosema Count
hist(NosemaAverage,
breaks=30,
col="steelblue",
ylim=c(0,250),
xlim=c(0,1300),
xlab="Nosema Count per Bee",
main = "Histogram of Nosema Count"
)
library(RColorBrewer)
colors<-colorRampPalette(brewer.pal(9,"Blues"))(19)
colors<-rev(colors)
#Log transform data
LogNosema <- log(NosemaAverage)
hist(LogNosema, col=colors, ylim=c(0,20), xlim=c(-2,8))
#No0Nosema<-NosemaAverage[NosemaAverage !=0]
NosemaTable<-table(NosemaAverage)
barplot(height = NosemaTable,
ylim = c(0,250),
ylab = "Frequency",
xlab = "Counts",
col=colors
)
#-------------------------------------------------------------------
# barplot showing percent prevalence by Species
SpeciesTab <- table(Species,NosemaPA)
SpeciesTab <- SpeciesTab[-3,]
SpeciesTab <- SpeciesTab[-3,]
SpeciesTab <- SpeciesTab[-5,]
Infected<-SpeciesTab[,2]
Uninfected<-SpeciesTab[,1]
x<-Infected/(Infected+Uninfected)
mean(x)
Species1 <- c("bimac.", "bor.", "imp.", "tern.", "vag.")
library(RColorBrewer)
colors<-colorRampPalette(brewer.pal(9,"Blues"))(5)
plot1 <- barplot(height=SpeciesTab[,2]/SpeciesTab[,1],
names.arg=Species1,
xlab="Bombus spp.",
ylab="Probability of Infection",
ylim=c(0,0.6),
#main=paste("Prevalence of Nosema by Bombus spp."),
col.main="blue",
font.lab=2,
las=1,
lwd=2,
col = colors,
border="black"
#add=TRUE
)
n <- SpeciesTab[,2]+SpeciesTab[,1]
p <- SpeciesTab[,2]/SpeciesTab[,1]
SE <- (p*(1-p))/n
SD=SE*sqrt(n)
# plot SD bars on plot:
arrows(plot1, p-SD*2, plot1, p+SD*2, lwd=2, angle=90, code=3)
#segments(plot1, p-SE*2, plot1, p+SE*2, lwd=2)
#arrows(plot1, p-SE*2, plot1, p+SE*2, lwd=2, angle=90, code=3)
#-----------------------------------------------------------------
#Contingecy table chi-sq
SpeciesTab <- table(Species,NosemaPA)
SpeciesTab
SpeciesTab <- SpeciesTab[-3,]
SpeciesTab <- SpeciesTab[-3,]
SpeciesTab <- SpeciesTab[-5,]
Infected<-SpeciesTab[,2]
Uninfected<-SpeciesTab[,1]
data <- rbind(Infected,Uninfected)
rownames(data) <- c("Infected", "Uninfected")
colnames(data) <- c("bimac.", "bor.", "imp.", "tern.", "vag.")
print(data)
colors<-colorRampPalette(brewer.pal(9,"Blues"))(5)
print(chisq.test(data))
mosaicplot(data,col=colors,shade=FALSE,
main="Prevalence of Nosema by Species",
ylab = "Nosema Spp.")
#-------------------------------------------------------------------
# barplot showing percent prevalence by Caste
colors1<-colorRampPalette(brewer.pal(9,"Blues"))(3)
CasteTab <- table(Caste,NosemaPA)
CasteTab
Caste1 <- c("Male", "Queen", "Worker")
plot1 <- barplot(height=CasteTab[,2]/CasteTab[,1],
names.arg=Caste1,
xlab="Caste",
ylab="Probability of Infection",
ylim=c(0,0.6),
fisher.test(data)
fisher.test(data)
data
str(data)
as.matrix(data)
fisher.test(data)
# barplot showing percent prevalence by Caste
colors1<-colorRampPalette(brewer.pal(9,"Blues"))(3)
CasteTab <- table(Caste,NosemaPA)
CasteTab
Caste1 <- c("Male", "Queen", "Worker")
plot1 <- barplot(height=CasteTab[,2]/CasteTab[,1],
names.arg=Caste1,
xlab="Caste",
ylab="Probability of Infection",
ylim=c(0,0.6),
#main=paste("Prevalence of Nosema by Caste"),
col.main="steelblue",
font.lab=2,
las=1,
lwd=2,
col = colors1,
border="black"
# add=TRUE
)
n <- CasteTab[,1]+CasteTab[,1]
p <- CasteTab[,2]/CasteTab[,1]
SE <- (p*(1-p))/n
SE
SD=SE*sqrt(n)
SD
# plot SD bars on plot:
arrows(plot1, p-SD*2, plot1, p+SD*2, lwd=2, angle=90, code=3)
#segments(plot1, p-SE*2, plot1, p+SE*2, lwd=2)
#arrows(plot1, p-SE*2, plot1, p+SE*2, lwd=2, angle=90, code=3)
#-----------------------------------------------------------------
# Chisq on Caste
CasteTab <- table(Caste,NosemaPA)
CasteTab
Infected<-CasteTab[,2]
Uninfected<-CasteTab[,1]
data <- rbind(Infected,Uninfected)
rownames(data) <- c("Infected", "Uninfected")
colnames(data) <- c("Males", "Queens", "Workers")
print(data)
colors<-colorRampPalette(brewer.pal(9,"Blues"))(3)
print(chisq.test(data))
mosaicplot(data,col=colors,
shade=FALSE,
main="Prevalence of Nosema by Caste",
ylab = "Caste")
#-------------------------------------------------------------------
# barplot showing percent prevalence by Site
colors2<-colorRampPalette(brewer.pal(9,"Blues"))(15)
SiteTab <- table(Site,NosemaPA)
SiteTab <-SiteTab[-16,]
SiteTab <-SiteTab[-16,]
Site1 <- c("100", "Amy", "CBF", "DanG", "GMC", "HORT", "LIB", "LOW", "MRW", "NORD", "OVC", "PC", "PEL","PVC", "Robin")
plot1 <- barplot(height=SiteTab[,2]/SiteTab[,1],
names.arg=Site1,
#xlab="Site",
ylab="Probability of Infection",
ylim=c(0,1),
#main=paste("Prevalence of Nosema by Site"),
col.main="steelblue",
font.lab=2,
las=2,
lwd=2,
col = colors2,
border="black"
#add=TRUE
)
#-------------------------------------------------------------------
#Contingecy table chi-sq site
SiteTab <- table(Site,NosemaPA)
SiteTab <-SiteTab[-16,]
SiteTab <-SiteTab[-16,]
Infected<-SiteTab[,2]
Uninfected<-SiteTab[,1]
data <- rbind(Infected,Uninfected)
rownames(data) <- c("Infected", "Uninfected")
colnames(data) <- c("100", "Amy", "CBF", "DanG", "GMC", "HORT", "LIB", "LOW", "MRW", "NORD", "OVC", "PC", "PEL","PVC", "Robin")
print(data)
colors<-colorRampPalette(brewer.pal(9,"Blues"))(15)
print(chisq.test(data))
mosaicplot(data,col=colors,shade=FALSE)
#-----------------------------------------------------------------
# Nosmea prevalence by hbPA
hbTab <- table(hbPA,NosemaPA)
hbTab
Infected<-hbTab[,2]
Uninfected<-hbTab[,1]
x<-Infected/(Infected+Uninfected)
mean(x)
HB1 <- c("Near", "Far")
library(RColorBrewer)
colors4<-colorRampPalette(brewer.pal(9,"Blues"))(2)
plot1 <- barplot(height=hbTab[,2]/hbTab[,1],
names.arg=HB1,
xlab="Proximity to Honeybee Colonies",
ylab="Probability of Infection",
ylim=c(0,0.6),
#main=paste("Prevalence of Nosema by Bombus spp."),
col.main="blue",
font.lab=2,
las=1,
lwd=2,
col = colors4,
border="black"
#add=TRUE
)
n <- hbTab[,2]+hbTab[,1]
p <- hbTab[,2]/hbTab[,1]
SE <- (p*(1-p))/n
SE
SD=SE*sqrt(n)
SD
# plot SD bars on plot:
arrows(plot1, p-SD*2, plot1, p+SD*2, lwd=2, angle=90, code=3)
#-----------------------------------------------------------------
# Chisq on HB proximity
hbTab <- table(hbPA,NosemaPA)
hbTab
Infected<-hbTab[,2]
Uninfected<-hbTab[,1]
data <- rbind(Infected,Uninfected)
rownames(data) <- c("Infected", "Uninfected")
colnames(data) <- c("Near", "Far")
print(data)
colors<-colorRampPalette(brewer.pal(9,"Blues"))(2)
print(chisq.test(data))
mosaicplot(data,col=colors,shade=FALSE, main="Prevalence of Nosema by Honeybee Proximity",
ylab = "Honeybee Proximity")
#-----------------------------------------------------------------
# Nosema prob. of infection by HB proximity and species
x<-aggregate(NosemaPA~Date, data=NosemaDF, mean)
x
barplot(height=x$NosemaPA)
NosemaAverage
x<-which(NosemaAverage == 0)
length(x)
#-----------------------------------------------------------------
#Mean nosema by species and caste
x<-aggregate(NosemaAverage~Species+Caste, data=NosemaDF, mean)
x<-data.frame(x)
x
#-----------------------------------------------------------------
# Nosmea count by date
dateplotmat <- cbind(NosemaDF$Date,NosemaDF$NosemaAverage)
head(dateplotmat)
dateplotmat <- dateplotmat[-221,]
dateplotmat <- dateplotmat[-224,]
dateplotDF <- data.frame(dateplotmat)
plot(dateplotDF$X1,dateplotDF$X2)
LineBF <- lm(dateplotDF$X2~dateplotDF$X1, data=dateplotDF)
line<-abline(LineBF, col = "blue")
summary(LineBF)
#-----------------------------------------------------------------
# ANOSIM (vegan) non parametric statistical test HB
library(vegan)
anoHB <- data.frame(cbind(hbPA, NosemaAverage))
attach(anoHB)
anoHB <- anoHB[-239,]
anoHB
z <- anosim(dat=anoHB,grouping=hbPA, distance="binomial",permutations=999)
summary(z)
plot(z)
z
#-----------------------------------------------------------------
# ANOSIM (vegan) non parametric statistical test caste
library(vegan)
anoCaste <- data.frame(cbind(Caste, NosemaAverage))
attach(anoCaste)
Caste <- anoCaste[-239,]
anoCaste
z <- anosim(dat=anoCaste,grouping=Caste, distance="binomial",permutations=999)
summary(z)
plot(z)
z
#-----------------------------------------------------------------
# ADONIS (vegan) non parametric statistical test HB/Caste
library(vegan)
anoHB <- data.frame(cbind(factor(hbPA),factor(Caste),NosemaAverage))
attach(anoHB)
anoHB <- anoHB[-239,]
anoHB
z<-adonis(formula=anoHB~V1+V2,data=anoHB, permutations=999)
summary(z)
plot(z)
z
#-----------------------------------------------------------------
# K-W non parmaetric test Caste
head(NosemaAverage)
head(Caste)
kwCaste <- data.frame(cbind(as.factor(Caste), NosemaAverage))
attach(kwCaste)
kwCaste <- kwCaste[-239,]
z <- kruskal.test(x=NosemaAverage ,g=V1 ,data=kwCaste, formula=NosemaAverage~V1 )
summary(z)
z
head(NosemaAverage)
head(hbPA)
kwHB <- data.frame(cbind(as.factor(hbPA), NosemaAverage))
attach(kwHB)
kwHB <- kwHB[-239,]
z <- kruskal.test(x=NosemaAverage ,g=V1 ,data=kwHB, formula=NosemaAverage~V1 )
summary(z)
z
kwHB
#-----------------------------------------------------------------
# K-W non parmaetric test Species
head(NosemaAverage)
head(Species)
kwSP <- data.frame(cbind(Species, NosemaAverage))
attach(kwSP)
kwSP <- kwSP[-61,]
kwSP <- kwSP[-167,]
kwSP <- kwSP[-175,]
kwSP <- kwSP[-204,]
kwSP <- kwSP[-235,]
kwSP
z <- kruskal.test(x=NosemaAverage ,g=Species ,data=kwSP, formula=NosemaAverage~Species )
summary(z)
z
#-----------------------------------------------------------------
# rank nosema data mean
rankN <- rank(NosemaAverage)
hbPA
rankDF<-data.frame(cbind(rankN,hbPA))
aggregate(rankN, by=list(hbPA), FUN=mean)
aggregate(formula=rankN~hbPA, data=rankDF, FUN = function(x) c(M=mean(x), SD=sd(x)))
library(dplyr)
rankDF<-data.frame(cbind(rankN,hbPA))
group_by(rankDF, hbPA) %>%
summarise(mean=mean(rankN), sd=sd(rankN))
rankDF$rankN
#----------------------------------------------------------------
NosemaAverage>44
mastertable <- table(NosemaPA)
x <- data.frame(mastertable)
x
Infected <- x[2,2]
Uninfected <- x[1,2]
x<-Infected/(Infected+Uninfected)
Infected
Uninfected
NosemaDF
x <- NosemaDF[which(NosemaDF$NosemaAverage>40),]
x
x <- NosemaDF[which(NosemaDF$NosemaAverage>30),]
x
