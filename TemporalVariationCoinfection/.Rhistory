return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
for (t in 1:TimeSteps){
name <- rename(t)
png(name)
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
}
}
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
#run ImageMagick
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
for (t in 1:TimeSteps){
name <- rename(t)
png(name)
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
}
}
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
getwd()
###################################################################
# Cellualar Automata Model of Spillover HB -> Bombus
# P. Alexander Burnham
# June 22, 2018
###################################################################
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Create a matrix of numbers from 0 to 5
# 0 = Empty Space
# 1 = HB Ind.
# 2 = Bombus Ind.
# 3 = HB Col.
# 4 = Bombus Col.
# 5 = Flower
xDim <- 50
yDim <- 50
TimeSteps <- 50
#seperate matrix for (flowers, BBcolonies, HBcoloneies), (HB, BB), (InfectedYes, InfectedNo)
cols <- c(
'0' = "white",
'1' = "yellow",
'2' = "orange",
'3' = "black",
'4' = "grey",
'5' = "red"
)
beeVec <-sample(0:5,xDim*yDim,replace=T, prob = c(0.9, 0.02, 0.02, 0.02, 0.02, 0.02))
beeMat <- matrix(data = beeVec, nrow = yDim, ncol = xDim)
buff <- integer(xDim)
buff2 <- integer(xDim+2)
beeMat <- rbind(buff, beeMat, buff)
beeMat <- cbind(buff2, beeMat, buff2)
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
for (t in 1:TimeSteps){
name <- rename(t)
png(name)
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
}
}
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
#run ImageMagick
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
system(my_command)
cols <- c(
'0' = "white",
'1' = "yellow",
'2' = "orange",
'3' = "black",
'4' = "grey",
'5' = "red"
)
beeVec <-sample(0:5,xDim*yDim,replace=T, prob = c(0.9, 0.02, 0.02, 0.02, 0.02, 0.02))
beeMat <- matrix(data = beeVec, nrow = yDim, ncol = xDim)
buff <- integer(xDim)
buff2 <- integer(xDim+2)
beeMat <- rbind(buff, beeMat, buff)
beeMat <- cbind(buff2, beeMat, buff2)
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
for (t in 1:TimeSteps){
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
}
}
name <- rename(t)
png(name)
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
name <- rename(t)
name
png(name)
# Preliminaries:
# Clear memory of characters:
ls()
rm(list=ls())
setwd("~/Documents/GitHub/Dissertation/TemporalVariationCoinfection")
# load in data
TempVar <- read.csv("TempVar.csv", header=TRUE, stringsAsFactors=FALSE)
View(TempVar)
table(TempVar$SampleStatus)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
return(time)
}
CapeCodMobile(distance = 45, speed = 70)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
time <- time*60
return(time)
}
CapeCodMobile(distance = 45, speed = 70)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
time <- time*60
time <- paste(time, "Minutes")
return(time)
}
CapeCodMobile(distance = 45, speed = 70)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes
time <- round(time*60)
# this adds unit designation
time <- paste(time, "Minutes")
return(time)
}
CapeCodMobile(distance = 45, speed = 70)
CapeCodMobile(distance = 41, speed = 70)
CapeCodMobile(distance = 41, speed = 80)
CapeCodMobile(distance = 41, speed = 70)
CapeCodMobile(distance = 41, speed = 300)
CapeCodMobile(distance = 267, speed = 300)
CapeCodMobile(distance = 5, speed = 60)
CapeCodMobile(distance = 5, speed = 70)
CapeCodMobile(distance = 4, speed = 70)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes
time <- time*60
# this adds unit designation
time <- paste(time, "Minutes")
return(time)
}
CapeCodMobile(distance = 4, speed = 70)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes
minutes <- round(time*60)
seconds <- (time*60) - round(time*60)
# this adds unit designation
time <- paste(minutes, "Minutes", seconds, "Seconds")
return(time)
}
CapeCodMobile(distance = 4, speed = 70)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes
minutes <- round(time*60)
seconds <- ((time*60) - round(time*60))*60
# this adds unit designation
time <- paste(minutes, "Minutes", seconds, "Seconds")
return(time)
}
CapeCodMobile(distance = 4, speed = 70)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes
minutes <- round(time*60)
seconds <- round(((time*60) - round(time*60))*60)
# this adds unit designation
time <- paste(minutes, "Minutes", seconds, "Seconds")
return(time)
}
CapeCodMobile(distance = 4, speed = 70)
(80 + 70 + 60 + 20 + 10)/5
averageSpeed <- (80 + 70 + 60 + 20 + 10)/5
averageSpeed
averageSpeed <- (80 + 70 + 60 + 20 + 10)/5
averageSpeed
mean(80 + 70 + 60 + 20 + 10)
mean(80, 70, 60, 20, 10)
mean(c(80, 70, 60, 20, 10))
CapeCodMobile(distance =267 , speed = averageSpeed)
334/60
averageSpeed <- (80 + 70 + 50)/3
CapeCodMobile(distance =267 , speed = averageSpeed)
averageSpeed
CapeCodMobile(distance = 29, speed = 55)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes
minutes <- time*60
# this adds unit designation
time <- paste(minutes, "Minutes")
return(time)
}
CapeCodMobile(distance = 29, speed = 55)
# converts our output to minutes
minutes <- (time*60) - round(time*60)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes
minutes <- (time*60) - round(time*60)
# this adds unit designation
time <- paste(minutes, "Minutes")
return(time)
}
averageSpeed <- (80 + 70 + 45)/3
CapeCodMobile(distance = 29, speed = 55)
# converts our output to minutes
minutes <- (time*60) - signif(time*60, digits = 2)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes
minutes <- (time*60) - signif(time*60, digits = 2)
# this adds unit designation
time <- paste(minutes, "Minutes")
return(time)
}
averageSpeed <- (80 + 70 + 45)/3
CapeCodMobile(distance = 29, speed = 55)
ceiling(4.3567)
floor(4.3567)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes
minutes <- (time*60) - floor(time*60)
# this adds unit designation
time <- paste(minutes, "Minutes")
return(time)
}
averageSpeed <- (80 + 70 + 45)/3
CapeCodMobile(distance = 29, speed = 55)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes
seconds <- round(60*((time*60) - floor(time*60)))
minutes <- round(time*60)
# this adds unit designation
time <- paste(minutes, "Minutes", seconds, "Seconds")
return(time)
}
averageSpeed <- (80 + 70 + 45)/3
CapeCodMobile(distance = 29, speed = 55)
CapeCodMobile(distance = 22, speed = 45)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes and seconds
seconds <- round(60*((time*60) - floor(time*60)))
minutes <- round(time*60)
# this adds unit designation
time <- paste("The time until we reach Grandma's House is:", minutes, "Minutes", seconds, "Seconds")
return(time)
}
averageSpeed <- (80 + 70 + 45)/3
CapeCodMobile(distance = 22, speed = 45)
# this adds unit designation
time <- paste("The time until we reach Grandma's House is in the Cape Cod Mobile:", minutes, "Minutes", seconds, "Seconds")
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes and seconds
seconds <- round(60*((time*60) - floor(time*60)))
minutes <- round(time*60)
# this adds unit designation
time <- paste("The time until we reach Grandma's House is in the Cape Cod Mobile:", minutes, "Minutes", seconds, "Seconds")
return(time)
}
averageSpeed <- (80 + 70 + 45)/3
CapeCodMobile(distance = 22, speed = 45)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes and seconds
seconds <- round(60*((time*60) - floor(time*60)))
minutes <- round(time*60)
# this adds unit designation
time <- paste("The time until we reach Grandma's House in the Cape Cod Mobile is:", minutes, "Minutes", seconds, "Seconds")
return(time)
}
averageSpeed <- (80 + 70 + 45)/3
CapeCodMobile(distance = 22, speed = 45)
CapeCodMobile(distance = 19, speed = 45)
c(1:19)
rev(c(1:19))
DistVec <- rev(c(1:19))
CapeCodMobile(distance = DistVec, speed = 45)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes and seconds
seconds <- round(60*((time*60) - floor(time*60)))
minutes <- round(time*60)
# this adds unit designation
time <- paste("distance = ", distance, "Miles", minutes, "Minutes", seconds, "Seconds")
return(time)
}
averageSpeed <- (80 + 70 + 45)/3
DistVec <- rev(c(1:19))
CapeCodMobile(distance = DistVec, speed = 45)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes and seconds
seconds <- round(60*((time*60) - floor(time*60)))
minutes <- round(time*60)
# this adds unit designation
time <- paste("distance = ", distance, "Miles", "Time to arrivale =",  minutes, "Minutes", seconds, "Seconds")
return(time)
}
DistVec <- rev(c(1:19))
DistVec
CapeCodMobile(distance = DistVec, speed = 45)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes and seconds
seconds <- round(60*((time*60) - floor(time*60)))
minutes <- round(time*60)
# this adds unit designation
time <- paste("distance = ", distance, "Miles:", "Time to arrival =",  minutes, "Minutes", seconds, "Seconds")
return(time)
}
DistVec <- rev(c(1:19))
CapeCodMobile(distance = DistVec, speed = 45)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes and seconds
seconds <- round(60*((time*60) - floor(time*60)))
minutes <- round(time*60)
# this adds unit designation
time <- paste("distance = ", distance, "Miles,", "Time to arrival =",  minutes, "Minutes", seconds, "Seconds")
return(time)
}
DistVec <- rev(c(1:19))
CapeCodMobile(distance = DistVec, speed = 45)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes and seconds
seconds <- round(60*((time*60) - floor(time*60)))
minutes <- round(time*60)
# this adds unit designation
time <- paste("Distance = ", distance, "Miles,", "Time to arrival =",  minutes, "Minutes", seconds, "Seconds")
return(time)
}
DistVec <- rev(c(1:19))
CapeCodMobile(distance = DistVec, speed = 45)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes and seconds
seconds <- round(60*((time*60) - floor(time*60)))
minutes <- round(time*60)
# this adds unit designation
time <- paste("Distance = ", distance, "miles,", "Time to arrival =",  minutes, "minutes", seconds, "seconds")
return(time)
}
DistVec <- rev(c(1:19))
CapeCodMobile(distance = DistVec, speed = 45)
DistVec <- rev(c(1:8))
CapeCodMobile(distance = DistVec, speed = 60)
DistVec <- rev(c(8))
CapeCodMobile(distance = DistVec, speed = 60)
DistVec <- rev(c(6.3))
CapeCodMobile(distance = DistVec, speed = 60)
DistVec <- rev(c(5.2))
DistVec <- rev(c(3.9))
CapeCodMobile(distance = DistVec, speed = 60)
# create a vector of distances is reverse order
DistVec <- rev(c(2))
# call to function
CapeCodMobile(distance = DistVec, speed = 60)
# call to function
CapeCodMobile(distance = DistVec, speed = 55)
# call to function
CapeCodMobile(distance = DistVec, speed = 50)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes and seconds
seconds <- round(60*((time*60) - floor(time*60)))
minutes <- round(time*60)
# this adds unit designation
time <- paste("Distance = ", distance, "miles,", "Time to arrival =",  minutes, "minutes", seconds, "seconds")
return(time)
}
# create a vector of distances is reverse order
DistVec <- rev(c(2))
# call to function
CapeCodMobile(distance = DistVec, speed = 50)
# create a vector of distances is reverse order
DistVec <- rev(c(10))
# call to function
CapeCodMobile(distance = DistVec, speed = 75)
# create a vector of distances is reverse order
DistVec <- rev(c(10.45))
# call to function
CapeCodMobile(distance = DistVec, speed = 75)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes and seconds
seconds <- round(60*((time*60) - floor(time*60)))
minutes <- round(time*60)
# this adds unit designation
time <- paste("Distance = ", distance, "miles,", "Time to arrival =",  minutes, "minutes", seconds, "seconds")
return(time)
}
# call to function
CapeCodMobile(distance = 1356, speed = 768)
# call to function
CapeCodMobile(distance = 1356, speed = 670000000)
# call to function
CapeCodMobile(distance = 50000, speed = 670000000)
# call to function
CapeCodMobile(distance = 500000, speed = 670000000)
# call to function
CapeCodMobile(distance = 1000000, speed = 670000000)
# call to function
CapeCodMobile(distance = 10000000000000000000, speed = 67000000000000000000000000000000000000000)
CapeCodMobile <- function(distance = 100, speed = 60){
time <- distance/speed
# converts our output to minutes and seconds
seconds <- (60*((time*60) - floor(time*60)))
minutes <- round(time*60)
# this adds unit designation
time <- paste("Distance = ", distance, "miles,", "Time to arrival =",  minutes, "minutes", seconds, "seconds")
return(time)
}
# call to function
CapeCodMobile(distance = 10000000000000000000, speed = 67000000000000000000000000000000000000000)
# call to function
CapeCodMobile(distance = 10000000000000000000, speed = 670000000000000000000000000000000000000000000000000000000000000)
# call to function
CapeCodMobile(distance = 10000000000000000000, speed = 6700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
# call to function
CapeCodMobile(distance = 10000000000000000000, speed = 670)
# call to function
CapeCodMobile(distance = 3000000, speed = 670)
