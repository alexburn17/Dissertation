plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Health Status:") + theme(legend.position=c(.2, .85)) + coord_cartesian(ylim = c(-2, 2)) + annotate("segment", x = .5, xend = 2.5, y = meanCI, yend = meanCI, col = "red") + annotate("segment", x = .5, xend = 2.5, y = upper, yend = upper, col = "red", linetype = 2, size = 0.3) + annotate("segment", x = .5, xend = 2.5, y = lower, yend = lower, col = "red", linetype = 2, size = 0.3)
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(DF1, aes(x=Gene,
y=mean,
fill=HealthStat)) +
geom_bar(stat="identity",
color = "black",
position=position_dodge()) + labs(x="Gene", y = "log(Fold Change)") + geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Health Status:") + theme(legend.position=c(.2, .85)) + coord_cartesian(ylim = c(-2, 2)) + annotate("segment", x = .5, xend = 2.5, y = meanCI, yend = meanCI, col = "red") + annotate("segment", x = .5, xend = 2.5, y = upper, yend = upper, col = "red", linetype = 2, size = 0.3) + annotate("segment", x = .5, xend = 2.5, y = lower, yend = lower, col = "red", linetype = 2, size = 0.3)
head(DF)
HealthStat <- rep(c("Sick","Sick","Healthy","Sick","Healthy","Healthy","Sick","Sick","Healthy","Sick","Healthy","Healthy","Sick","Sick","Healthy","Sick","Healthy","Healthy","Sick","Healthy"),2)
FoldChange <- rnorm(40, mean = 0, sd = 2)
FoldChangeBack <- rnorm(40, mean = 0, sd = 2)
Gene <- c(rep("Gene1", 20), rep("Gene2", 20))
DF <- data.frame(Gene, HealthStat, FoldChange, FoldChangeBack)
DF1 <- ddply(DF, c("HealthStat", "Gene"), summarise,
n = length(FoldChange),
mean = mean(FoldChange, na.rm=TRUE),
sd = sd(FoldChange, na.rm=TRUE),
se = sd / sqrt(n))
meanCI <- mean(DF$FoldChangeBack)
n <- length(DF$FoldChangeBack)
s <- sd(DF$FoldChangeBack)
MOE <- qnorm(0.975)*s/sqrt(n)
upper <- meanCI + MOE
lower <- meanCI - MOE
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(DF1, aes(x=Gene,
y=mean,
fill=HealthStat)) +
geom_bar(stat="identity",
color = "black",
position=position_dodge()) + labs(x="Gene", y = "log(Fold Change)") + geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Health Status:") + theme(legend.position=c(.2, .85)) + coord_cartesian(ylim = c(-2, 2)) + annotate("segment", x = .5, xend = 2.5, y = meanCI, yend = meanCI, col = "red") + annotate("segment", x = .5, xend = 2.5, y = upper, yend = upper, col = "red", linetype = 2, size = 0.3) + annotate("segment", x = .5, xend = 2.5, y = lower, yend = lower, col = "red", linetype = 2, size = 0.3)
plot1 <- ggplot(DF1, aes(x=Gene,
y=mean,
fill=HealthStat)) +
geom_bar(stat="identity",
color = "black",
position=position_dodge()) + labs(x="Gene", y = "log(Fold Change)") + geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Health Status:") + theme(legend.position=c(.2, .85)) + coord_cartesian(ylim = c(-2, 2)) + annotate("segment", x = .5, xend = 2.5, y = meanCI, yend = meanCI, col = "red") + annotate("segment", x = .5, xend = 2.5, y = upper, yend = upper, col = "red", linetype = 2, size = 0.3) + annotate("segment", x = .5, xend = 2.5, y = lower, yend = lower, col = "red", linetype = 2, size = 0.3)
qnorm(0.975)
hist(DF$FoldChangeBack)
model <- aov(data=DF, formula = FoldChange ~ HealthStat)
summary(model)
model <- aov(data=DF, formula = FoldChange ~ HealthStat)
summary(model)
model <- aov(data=DF, formula = FoldChange ~ HealthStat + Gene)
summary(model)
model <- aov(data=DF, formula = FoldChange ~ HealthStat * Gene)
summary(model)
model <- aov(data=DF, formula = (FoldChange ~ HealthStat) * Gene)
model <- aov(data=DF, formula = FoldChange ~ HealthStat / Gene)
summary(model)
model <- aov(data=DF, formula = FoldChange ~ HealthStat; Gene)
model <- aov(data=DF, formula = FoldChange ~ HealthStat: Gene)
summary(model)
model <- aov(data=DF, formula = FoldChange ~ HealthStat - Gene)
summary(model)
model <- lm(data=DF, formula = FoldChange ~ HealthStat)
summary(model)
HealthStat <- rep(c("Sick","Sick","Healthy","Sick","Healthy","Healthy","Sick","Sick","Healthy","Sick","Healthy","Healthy","Sick","Sick","Healthy","Sick","Healthy","Healthy","Sick","Healthy"),2)
ID <- rep(1:20, 2)
Location <- rep(c("I", "O", "I", "O", "O", "I", "O", "I", "O", "I"), 4)
FoldChange <- rnorm(40, mean = 0, sd = 2)
FoldChangeBack <- rnorm(40, mean = 0, sd = 2)
Gene <- c(rep("Gene1", 20), rep("Gene2", 20))
DF <- data.frame(ID, Gene, HealthStat, Loation, FoldChange, FoldChangeBack)
DF <- data.frame(ID, Gene, HealthStat, Location, FoldChange, FoldChangeBack)
DF1 <- ddply(DF, c("HealthStat", "Gene"), summarise,
n = length(FoldChange),
mean = mean(FoldChange, na.rm=TRUE),
sd = sd(FoldChange, na.rm=TRUE),
se = sd / sqrt(n))
meanCI <- mean(DF$FoldChangeBack)
n <- length(DF$FoldChangeBack)
s <- sd(DF$FoldChangeBack)
MOE <- qnorm(0.975)*s/sqrt(n)
upper <- meanCI + MOE
lower <- meanCI - MOE
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(DF1, aes(x=Gene,
y=mean,
fill=HealthStat)) +
geom_bar(stat="identity",
color = "black",
position=position_dodge()) + labs(x="Gene", y = "log(Fold Change)") + geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Health Status:") + theme(legend.position=c(.2, .85)) + coord_cartesian(ylim = c(-2, 2)) + annotate("segment", x = .5, xend = 2.5, y = meanCI, yend = meanCI, col = "red") + annotate("segment", x = .5, xend = 2.5, y = upper, yend = upper, col = "red", linetype = 2, size = 0.3) + annotate("segment", x = .5, xend = 2.5, y = lower, yend = lower, col = "red", linetype = 2, size = 0.3)
DF1 <- ddply(DF, c("HealthStat", "Gene"), summarise,
n = length(FoldChange),
mean = mean(FoldChange, na.rm=TRUE),
sd = sd(FoldChange, na.rm=TRUE),
se = sd / sqrt(n))
HealthStat <- rep(c("Sick","Sick","Healthy","Sick","Healthy","Healthy","Sick","Sick","Healthy","Sick","Healthy","Healthy","Sick","Sick","Healthy","Sick","Healthy","Healthy","Sick","Healthy"),2)
ID <- rep(1:20, 2)
Location <- rep(c("I", "O", "I", "O", "O", "I", "O", "I", "O", "I"), 4)
FoldChange <- rnorm(40, mean = 0, sd = 2)
FoldChangeBack <- rnorm(40, mean = 0, sd = 2)
Gene <- c(rep("Gene1", 20), rep("Gene2", 20))
DF <- data.frame(ID, Gene, HealthStat, Location, FoldChange, FoldChangeBack)
DF1 <- ddply(DF, c("HealthStat", "Gene"), summarise,
n = length(FoldChange),
mean = mean(FoldChange, na.rm=TRUE),
sd = sd(FoldChange, na.rm=TRUE),
se = sd / sqrt(n))
meanCI <- mean(DF$FoldChangeBack)
n <- length(DF$FoldChangeBack)
s <- sd(DF$FoldChangeBack)
MOE <- qnorm(0.975)*s/sqrt(n)
upper <- meanCI + MOE
lower <- meanCI - MOE
colors <- c("slategray3", "dodgerblue4")
plot1 <- ggplot(DF1, aes(x=Gene,
y=mean,
fill=HealthStat)) +
geom_bar(stat="identity",
color = "black",
position=position_dodge()) + labs(x="Gene", y = "log(Fold Change)") + geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Health Status:") + theme(legend.position=c(.2, .85)) + coord_cartesian(ylim = c(-2, 2)) + annotate("segment", x = .5, xend = 2.5, y = meanCI, yend = meanCI, col = "red") + annotate("segment", x = .5, xend = 2.5, y = upper, yend = upper, col = "red", linetype = 2, size = 0.3) + annotate("segment", x = .5, xend = 2.5, y = lower, yend = lower, col = "red", linetype = 2, size = 0.3)
head(DF)
mod2 <- glmer(data=DF, formula = FoldChange ~ HealthStat + (1|ID) + (1|Location), family = gaussian)
library(lme4)
mod2 <- glmer(data=DF, formula = FoldChange ~ HealthStat + (1|ID) + (1|Location), family = gaussian)
summary(BQCVmod)
summary(mod2)
head(DF)
model <- aov(data=DF, formula = FoldChange ~ HealthStat)
summary(model)
library(lme4)
mod2 <- lmer(data=DF, formula = FoldChange ~ HealthStat + (1|ID) + (1|Location))
summary(mod2)
nullMod <- lmer(data=DF, formula = FoldChange ~ 1 + (1|ID) + (1|Location))
fullMod <- lmer(data=DF, formula = FoldChange ~ HealthStat + (1|ID) + (1|Location))
anova(nullMod, fullMod)
nullMod <- lmer(data=DF, formula = FoldChange ~ 1 + (1|ID) + (1|Location), REML = FALSE)
fullMod <- lmer(data=DF, formula = FoldChange ~ HealthStat + (1|ID) + (1|Location), REML = FALSE)
anova(nullMod, fullMod)
splitDF <- split(DF, DF$Gene)
splitDF$Gene1
nullMod <- lmer(data=splitDF$Gene1, formula = FoldChange ~ 1 + (1|ID) + (1|Location), REML = FALSE)
nullMod <- lmer(data=splitDF$Gene1, formula = FoldChange ~ 1 + (1|ID) + (1|Location), REML = FALSE)
fullMod <- lmer(data=splitDF$Gene1, formula = FoldChange ~ HealthStat + (1|ID) + (1|Location), REML = FALSE)
splitDF
plot6 <- ggplot(DF, aes(Mass, fill=Origin))
library(ggplot2)
library(plyr)
ID <- c(1:200)
Origin <- c(rep("local", 100),
rep("California", 100))
FlowerType <- rep(c(rep("clover",25),
rep("goldenrod",25),
rep("treefoil",25),
rep("mixed",25)),2)
Mass <- c(rnorm(n = 100,
mean=32,
sd = 8), rnorm(n = 100,
mean=21,
sd=4))
NosemaLoad <-c(rnorm(n = 100,
mean=100000,
sd = 80000), rnorm(n = 100,
mean=500000,
sd=40000))
VarroaLoad <- c(rnorm(n = 100,
mean=5,
sd = 2), rnorm(n = 100,
mean=9,
sd=3))
Time <- rep(c(rep("Time1", 50), rep("Time2", 50)),2)
DF <- data.frame(ID, Origin, FlowerType, Mass, NosemaLoad, VarroaLoad, Time)
plot6 <- ggplot(DF, aes(Mass, fill=Origin))
plot6 + geom_histogram(alpha=0.2) + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin, alpha=0.2))
plot6 + geom_histogram() + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass))
plot6 + geom_histogram(fill=Origin, alpha=0.2) + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass))
plot6 + geom_histogram(data=subset(DF, Origin == "Local"), fill = "slategray3", alpha = 0.4) + geom_histogram(data=subset(DF, Origin == "California"), fill = "dodgerblue4", alpha = 0.4) + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass)) + geom_histogram(data=subset(DF, Origin == "Local"), fill = "slategray3", alpha = 0.4) + geom_histogram(data=subset(DF, Origin == "California"), fill = "dodgerblue4", alpha = 0.4)
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
subset(DF, Origin == "California")
plot6 <- ggplot(DF, aes(Mass, fill=Origin, alpha=0.2))
plot6 + geom_histogram() + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin))
plot6 + geom_histogram(alpha=0.2, position="identity") + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin))
+ geom_histogram(alpha=0.2, position="identity")
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, position="identity")
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.8, position="identity")
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, position="identity")
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, position="identity") +
stat_bin(bins = 30)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, position="identity") +
stat_bin(bins = 30)
plot6
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2)
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, position="identity")
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, aes(y = ..density..), position="identity")
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
Concentration <- c(rep("20%", 10), rep("10%", 10))
Concentration
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
Refractometer
data <- data.frame(Refractometer, Concentration, RefReading)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Refractometer, Concentration, RefReading)
data
Concentration <- c(rep("10%", 10), rep("20%", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Refractometer, Concentration, RefReading)
data
Trial <- rep(c(1:5),4)
Concentration <- c(rep("10%", 10), rep("20%", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Trial, Refractometer, Concentration, RefReading)
data
str(data)
mod <- aov(data, RefReading~Concentration + Refractometer)
mod <- aov(data = data, RefReading~Concentration + Refractometer)
summary(mod)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$20%$Concentration~splitDat$20%$Refractometer)
Trial <- rep(c(1:5),4)
Concentration <- c(rep("10", 10), rep("20", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Trial, Refractometer, Concentration, RefReading)
mod <- aov(data = data, RefReading~Concentration + Refractometer)
summary(mod)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$20$Concentration~splitDat$20$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer, data = splitDat$`20`)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer, data = splitDat$`20`)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
Concentration <- c(rep("Ten", 10), rep("Twenty", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Trial, Refractometer, Concentration, RefReading)
mod <- aov(data = data, RefReading~Concentration + Refractometer)
summary(mod)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$Twenty$Concentration~splitDat$Twenty$Refractometer)
summary(mod)
summary(mod)
mod <- aov(splitDat$Twenty$RefReading~splitDat$Twenty$Refractometer)
summary(mod)
mod10 <- aov(splitDat$Ten$RefReading~splitDat$Ten$Refractometer)
summary(mod10)
splitDatConc <- split(data, data$Refractometer)
splitDatConc$New - splitDatConc$Old
splitDatConc$New$RefReading - splitDatConc$Old$RefReading
splitDatConc$New$RefReading
reading <- splitDatConc$New$RefReading - splitDatConc$Old$RefReading
conc <- c(rep("Ten",5), rep("Twenty",5))
df <- data.frame(conc, reading)
df
m <- aov(data=df, reading~conc)
summary(m)
mean(reading)
setwd("~/Desktop/BCOR102/MooseLab")
setwd("~/Desktop/BCOR102/MooseLab")
data <- read.table("Data/MooseData.csv",
header=TRUE,
sep=",",
stringsAsFactors=FALSE)
data
print(DressedMooseMass)
AliveMassMultiplyer <- 1.45
AliveMooseMass <- DressedMooseMass * AliveMassMultiplyer
DressedMooseMass <- read.table("Data/MooseData.csv",
header=TRUE,
sep=",",
stringsAsFactors=FALSE)
AliveMassMultiplyer <- 1.45
AliveMooseMass <- DressedMooseMass * AliveMassMultiplyer
print(AliveMooseMass)
print(DressedMooseMass)
summary(DressedMooseMass)
summary(AliveMooseMass)
summary(DressedMooseMass)
max(AliveMooseMass$CowMass)
min(AliveMooseMass$CowMass)
max(AliveMooseMass$BullMass)
min(AliveMooseMass$BullMass)
CowHist <-hist(AliveMooseMass$CowMass,
xlim= c(400, 1600), breaks=9,
ylim= c(0,5), main = "Cow Masses Histogram", xlab= "Moose Mass (lbs.)", ylab= "Frequency",
col= "orangered3")
BullHist <-hist(AliveMooseMass$BullMass,
xlim= c(400, 1600), breaks=9,
ylim= c(0,5), main = "Bull Masses Histogram", xlab= "Moose Mass (lbs.)", ylab= "Frequency", col= "plum2")
plot(CowHist, col=rgb(1,0,1,1/4),xlim= c(400,1600), 10, ylim= c(0,5), xlab = "Mass (lbs.)",
ylab = "Frequency",
main = "Bull and Cow Masses Histogram")
plot(BullHist, col=rgb(0,0,1,1/4), add=T)
boxplot(AliveMooseMass)
Sexes <- c("Cow", "Bull")
Colors <- c("orangered3", "plum2")
boxplot(AliveMooseMass,
xlab = "Moose Sex",
ylab = "Mass (lbs.)",
names = Sexes,
col = Colors)
MooseMass <-c(AliveMooseMass$CowMass, AliveMooseMass$BullMass)
MooseSex <-as.factor(rep(c("Cow Mass","Bull Mass"),each=21))
AliveMooseANOVA <-aov(MooseMass~ MooseSex);summary(AliveMooseANOVA)
setwd("~/Desktop/BCOR102/MooseLab")
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
setwd("~/Dissertation/TemporalVariationCoinfection/Data")
TempVar <- read.csv("TempVarData.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
###############################################################################################
################################### PROGRAM BODY ##############################################
###############################################################################################
# source my functions
source("~/Dissertation/Scripts/BurnhamFunctions.R")
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(gridExtra)
library(grid)
library(cowplot)
###############################################################################################
# Variable scaling and manipulation:
# create binary variable for Nosema:
TempVar$NosemaBinary <- ifelse(TempVar$NosemaLoad == 0, 0, 1)
# create binary variable for Varroa:
TempVar$VarroaBinary <- ifelse(TempVar$VarroaLoad == 0, 0, 1)
# create scaled (0 to 1) variable for Brood Pattern:
TempVar$BroodPatternScaled <- TempVar$BroodPattern * 0.1
# create scaled (0 to 1) variable for Frames of Brood:
TempVar$FOBnorm <- ((TempVar$FOB) - min(TempVar$FOB, na.rm = TRUE))/(max(TempVar$FOB, na.rm = TRUE)-min(TempVar$FOB, na.rm = TRUE))
###############################################################################################
# create temporal variation data frame:
###########################################################################
# function name: DFmaker
# description: creates a dataframe from sampling event variable and variable name
# parameters:
# data = data frame
# Var1 = sampleing event
# Var2 = continous variable
# name = name of varaible
# repNum = number of reps in each section for the data frame
# returns a dataframe with columns for sampling event, variable and variable name
###########################################################################
DFmaker <- function(data = TempVar,
Var1 = "SamplingEvent",
Var2 = "DWVbinary",
repNum = 80,
name = "DWV"){
x <- cbind(select(data, Var1, Var2), rep(name, repNum))
names(x)[2] <- "variable"
names(x)[3] <- "variableName"
return(x)
}
###########################################################################
# END OF FUNCITON
###########################################################################
# create data frames for each variable and merge them
DW <- DFmaker(name = "DWV", Var2 = "DWVbinary")
BQ <- DFmaker(name = "BQCV", Var2 = "BQCVbinary")
NO <- DFmaker(name = "Nosema", Var2 = "NosemaBinary")
VA <- DFmaker(name = "Varroa", Var2 = "VarroaBinary")
BP <- DFmaker(name = "Brood Pattern", Var2 = "BroodPatternScaled")
FB <- DFmaker(name = "Frames of Bees", Var2 = "FOBnorm")
# create TempDat dataframe:
TempDat <- rbind(DW, BQ, NO, VA, BP, FB)
###############################################################################################
# Plotting Temporal Variation data:
Temporal <- ddply(TempDat, c("variableName", "SamplingEvent"), summarise,
n = length(variable),
mean = mean(variable, na.rm=TRUE),
sd = sd(variable, na.rm = TRUE),
se = sd / sqrt(n))
# split data frame into brood variables and pathogen variables
Brood <- Temporal[13:18,]
Path <- Temporal[1:12,]
# plotting pathogens through time
p1 <- ggplot(data = Path,
aes(x = SamplingEvent,
y = mean,
color = variableName)
) + geom_point(size=4) + labs(x = NULL, y = "Prevalance") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.85, .25), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x=element_blank(), axis.title.y=element_text(margin=margin(0,20,0,0))) + labs(color="Pathogen:") + scale_x_continuous(breaks=c(1,2,3))
# plotting brood measures through time
p2 <- ggplot( data = Brood,
aes(x = SamplingEvent,
y = mean,
group = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Relitive Intensity") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_line(aes(linetype=variableName), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.2, .85), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Population:") + scale_x_continuous(breaks=c(1,2,3))
# use cowlpot package to combine the two figures:
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(5/8, 3/8))
###############################################################################################
Full <- lmer(data = TempVar, formula = logBQCV ~ VarroaLoad * SamplingEvent + (1|labID) + (SamplingEvent|Yard), REML=F)
summary(Full)
Null <- lmer(data = TempVar, formula = logBQCV ~ SamplingEvent + (1|labID) + (SamplingEvent|Yard), REML=F)
anova(Full, Null, test="LRT")
Full1 <- lmer(data = TempVar, formula = logDWV ~ VarroaBinary * SamplingEvent + (1|labID) + (SamplingEvent|Yard), REML=F)
Null1 <- lmer(data = TempVar, formula = logDWV ~ 1 * SamplingEvent + (1|labID) + (SamplingEvent|Yard), REML=F)
anova(Full1, Null1, test="LRT")
Full1 <- glmer(data = TempVar, formula = DWVbinary ~ VarroaLoad * SamplingEvent + (1|labID) + (SamplingEvent|Yard), family = binomial(link = "logit"))
Null1 <- glmer(data = TempVar, formula = DWVbinary ~ 1 * SamplingEvent + (1|labID) + (SamplingEvent|Yard), family = binomial(link = "logit"))
anova(Full1, Null1, test="LRT")
View(TempVar)
p1 <- ggplot(data = Path,
aes(x = SamplingEvent,
y = mean,
color = variableName)
) + geom_point(size=4) + labs(x = NULL, y = "Prevalance") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.85, .25), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x=element_blank(), axis.title.y=element_text(margin=margin(0,20,0,0))) + labs(color="Pathogen:") + scale_x_continuous(breaks=c(1,2,3))
p2 <- ggplot( data = Brood,
aes(x = SamplingEvent,
y = mean,
group = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Rel. Intensity") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_line(aes(linetype=variableName), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.2, .85), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Population:") + scale_x_continuous(breaks=c(1,2,3))
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(5/8, 3/8))
p1 <- ggplot(data = Path,
aes(x = SamplingEvent,
y = mean,
color = variableName)
) + geom_point(size=4) + labs(x = NULL, y = "Prevalance") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.85, .25), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x=element_blank(), axis.title.y=element_text(margin=margin(0,20,0,0))) + labs(color="Pathogen:") + scale_x_continuous(breaks=c(1,2,3))
p2 <- ggplot( data = Brood,
aes(x = SamplingEvent,
y = mean,
group = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Rel. Intensity") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_line(aes(linetype=variableName), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.3, .85), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Population:") + scale_x_continuous(breaks=c(1,2,3))
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(5/8, 3/8))
p1 <- ggplot(data = Path,
aes(x = SamplingEvent,
y = mean,
color = variableName)
) + geom_point(size=4) + labs(x = NULL, y = "Prevalance") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.85, .25), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x=element_blank(), axis.title.y=element_text(margin=margin(0,20,0,0))) + labs(color="Pathogen:") + scale_x_continuous(breaks=c(1,2,3))
p2 <- ggplot( data = Brood,
aes(x = SamplingEvent,
y = mean,
group = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Rel. Intensity") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_line(aes(linetype=variableName), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.3, .9), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Population:") + scale_x_continuous(breaks=c(1,2,3))
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(5/8, 3/8))
p2 <- ggplot( data = Brood,
aes(x = SamplingEvent,
y = mean,
group = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Rel. Intensity") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_line(aes(linetype=variableName), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.35, .87), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Population:") + scale_x_continuous(breaks=c(1,2,3))
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(5/8, 3/8))
p1 <- ggplot(data = Path,
aes(x = SamplingEvent,
y = mean,
color = variableName)
) + geom_point(size=4) + labs(x = NULL, y = "Prevalance") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.85, .22), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x=element_blank(), axis.title.y=element_text(margin=margin(0,20,0,0))) + labs(color="Pathogen:") + scale_x_continuous(breaks=c(1,2,3))
p2 <- ggplot( data = Brood,
aes(x = SamplingEvent,
y = mean,
group = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Rel. Intensity") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_line(aes(linetype=variableName), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.35, .87), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Population:") + scale_x_continuous(breaks=c(1,2,3))
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(5/8, 3/8))
p1 <- ggplot(data = Path,
aes(x = SamplingEvent,
y = mean,
color = variableName)
) + geom_point(size=4) + labs(x = NULL, y = "Prevalance") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.85, .25), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x=element_blank(), axis.title.y=element_text(margin=margin(0,20,0,0))) + labs(color="Pathogen:") + scale_x_continuous(breaks=c(1,2,3))
p2 <- ggplot( data = Brood,
aes(x = SamplingEvent,
y = mean,
group = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Rel. Intensity") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_line(aes(linetype=variableName), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.35, .87), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Population:") + scale_x_continuous(breaks=c(1,2,3))
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(5/8, 3/8))
p1 <- ggplot(data = Path,
aes(x = SamplingEvent,
y = mean,
color = variableName)
) + geom_point(size=4) + labs(x = NULL, y = "Prevalance") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.05)) + geom_line(size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.85, .24), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x=element_blank(), axis.title.y=element_text(margin=margin(0,20,0,0))) + labs(color="Pathogen:") + scale_x_continuous(breaks=c(1,2,3))
p2 <- ggplot( data = Brood,
aes(x = SamplingEvent,
y = mean,
group = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Rel. Intensity") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_line(aes(linetype=variableName), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.35, .87), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Population:") + scale_x_continuous(breaks=c(1,2,3))
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(5/8, 3/8))
p2 <- ggplot( data = Brood,
aes(x = SamplingEvent,
y = mean,
group = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Rel. Intensity") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_line(aes(linetype=variableName), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.2, .87), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Population:") + scale_x_continuous(breaks=c(1,2,3))
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(5/8, 3/8))
p2 <- ggplot( data = Brood,
aes(x = SamplingEvent,
y = mean,
group = variableName)
) + geom_point(size=4) + labs(x = "Sampling Event", y = "Rel. Intensity") + coord_cartesian(ylim = c(0, 1), xlim = c(1,3)) + geom_line(aes(linetype=variableName), size=1) + scale_fill_brewer(palette = "Paired") + theme_classic(base_size = 17) + theme(legend.position=c(.22, .87), panel.border = element_blank(), axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'), axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + labs(linetype="Population:") + scale_x_continuous(breaks=c(1,2,3))
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(5/8, 3/8))
