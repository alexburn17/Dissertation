return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
for (t in 1:TimeSteps){
name <- rename(t)
png(name)
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
}
}
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
#run ImageMagick
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
system(my_command)
cols <- c(
'0' = "white",
'1' = "yellow",
'2' = "orange",
'3' = "black",
'4' = "grey",
'5' = "red"
)
beeVec <-sample(0:5,xDim*yDim,replace=T, prob = c(0.9, 0.02, 0.02, 0.02, 0.02, 0.02))
beeMat <- matrix(data = beeVec, nrow = yDim, ncol = xDim)
buff <- integer(xDim)
buff2 <- integer(xDim+2)
beeMat <- rbind(buff, beeMat, buff)
beeMat <- cbind(buff2, beeMat, buff2)
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
for (t in 1:TimeSteps){
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
}
}
name <- rename(t)
png(name)
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
name <- rename(t)
name
png(name)
planet <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "Pluto")
r <- c(0.387, 0.723, 1, 1.524, 5.203, 9.537, 19.19, 30.07, 39.48)
tau <- c(0.241, 0.615, 1, 1.881, 11/86, 29.42, 83.75, 163.7, 248.0)
planetDat <- as.data.frame(planet, r, tau)
r <- c(0.387, 0.723, 1, 1.524, 5.203, 9.537, 19.19, 30.07, 39.48)
tau <- c(0.241, 0.615, 1, 1.881, 11/86, 29.42, 83.75, 163.7, 248.0)
r3 <- r^3
tau2 < tau^2
planet <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "Pluto")
r <- c(0.387, 0.723, 1, 1.524, 5.203, 9.537, 19.19, 30.07, 39.48)
tau <- c(0.241, 0.615, 1, 1.881, 11/86, 29.42, 83.75, 163.7, 248.0)
r3 <- r^3
tau2 < tau^2
tau2 <- tau^2
r3
planetDat <- as.data.frame(planet, r, tau, r3, tau2)
planet <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "Pluto")
r <- c(0.387, 0.723, 1, 1.524, 5.203, 9.537, 19.19, 30.07, 39.48)
tau <- c(0.241, 0.615, 1, 1.881, 11.86, 29.42, 83.75, 163.7, 248.0)
r3 <- r^3
tau2 <- tau^2
planetDat <- as.data.frame(planet, r, tau, r3, tau2)
planetDat
planet <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "Pluto")
r <- c(0.387, 0.723, 1, 1.524, 5.203, 9.537, 19.19, 30.07, 39.48)
tau <- c(0.241, 0.615, 1, 1.881, 11.86, 29.42, 83.75, 163.7, 248.0)
r3 <- r^3
tau2 <- tau^2
planetDat <- as.data.frame(planet, r, tau, r3, tau2)
planetDat <- cbind(planet, r, tau, r3, tau2)
planetDat
planet <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "Pluto")
r <- c(0.387, 0.723, 1, 1.524, 5.203, 9.537, 19.19, 30.07, 39.48)
tau <- c(0.241, 0.615, 1, 1.881, 11.86, 29.42, 83.75, 163.7, 248.0)
r3 <- r^3
tau2 <- tau^2
r3
plot(r3, tau2)
plot(log10(r3), log10(tau2))
mod5 <- lm(log10(tau2)~log10(r3))
summary(mod5)
plot(log10(r3), log10(tau2))
text(x,y,labels = planet)
text(labels = planet)
text(x=r3, y= tau2, labels = planet)
plot(log10(r3), log10(tau2))
text(x=log10(r3), y= log10(tau2), labels = planet)
plot(log10(r3), log10(tau2), col="white")
text(x=log10(r3), y= log10(tau2), labels = planet)
abline(mod5)
abline(mod5, col="red")
mod5$coefficients
mod5$effects
mod5$model
# plot and model data
plot(log10(r3), log10(tau2), col="white", ylab = "Period (T^2)", xlab = "Radius (r^3)")
text(x=log10(r3), y= log10(tau2), labels = planet)
abline(mod5, col="red")
mod5 <- lm(log10(tau2)~log10(r3))
# plot and model data
plot(log10(r3), log10(tau2), col="white", ylab = "Period (T^2)", xlab = "Radius (r^3)", main = "Test of Kepler's 3rd Law")
text(x=log10(r3), y= log10(tau2), labels = planet)
abline(mod5, col="red")
mod5 <- lm(log10(tau2)~log10(r3))
mod5$coefficients
sqrt(1)
16^(1/3)
16^(-3)
16^(-1/3)
8^(1/3)
1^(1/3)
1/0.04
1-0.04
1/0.04
.2*.2*25
3^-1
1^-1
1^-2
4^-2
4^-1
8^(1/3)
9^0.3
7^1
## ------------------------------------------------------------------------
library(ggplot2)
library(TeachingDemos)
char2seed("Ozark")
# first create the data frame
dFrame <- expand.grid(xVar=1:100,yVar=1:100)
dFrame$z <- rnorm(10000)
## ------------------------------------------------------------------------
p1 <- ggplot(data=dFrame,aes(x=xVar,y=yVar)) +
geom_tile(aes(fill=z))
print(p1)
p2 <- ggplot(data=dFrame,aes(x=xVar,y=yVar)) +
geom_tile(aes(fill=z)) +
scale_fill_viridis_c()
print(p2)
p2 <- ggplot(data=dFrame,aes(x=xVar,y=yVar)) +
geom_tile(aes(fill=z)) +
scale_fill_viridis_c(na.value = "grey50")
print(p2)
#Preliminaries:
# Clear memoxry of characters
ls()
rm(list=ls())
# set working Directory:
setwd("~/Documents/GitHub/Dissertation/PlantTransTwo")
# Paramters:
#----------------------------------------------------------------------------
TimeSteps <- 150 # number of time steps
xDim <- 50 # x dimension of matrix
yDim <- 50 # y dimension of matrix
probBirth <- 20 # bee birth rate
probDeath <- 5 # bee death rate
probDep <- 50 # probability of depositing virus on flower
probAquireInfected <- 100
probScen <- 5
probFlow <- 2
colsBees <- c("white", "yellow", "orange", "pink", "red")
# initialize random matrix with starting proportions of HB, BB individs:
beeVec <-sample(0:4, xDim*yDim, replace=T, prob = c(0.7, 0.14, 0.05, 0.1, 0.01))
beeMat <- matrix(data = beeVec, nrow = yDim, ncol = xDim)
# initialize random matrix with starting proportions of HB, BB colonies, and flowers:
colVec <-sample(0:6, xDim*yDim, replace=T, prob = c(0.85, 0.01, 0.01, 0.01, 0.01, 0.1, 0.01))
colMat <- matrix(data = colVec, nrow = yDim, ncol = xDim)
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
# initialize a matrix to store number of each state in matrix at each time step
counter <- matrix(nrow=TimeSteps, ncol=5)
counterCols <- matrix(nrow=TimeSteps, ncol=7)
# loop through time steps
for (t in 1:TimeSteps){
# store table of counts in each row of counter matrix
counter[t,] <- as.vector(table(beeMat))
counterCols[t,] <- as.vector(table(colMat))
# loop through each cell in the matrix
for (i in 1:xDim){
for (j in 1:yDim){
# create random unit movement steps for i and j
temp1 <- sample(c(1, -1), 1 ,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1), 1 ,replace=T, prob = c(0.5, 0.5))
# Move the Bees:
if(beeMat[i,j]>=1){
a <- ifelse(sum(i,temp1) %in% 1:xDim, sum(i,temp1), round(runif(1, 1, xDim)))
b <- ifelse(sum(j,temp2) %in% 1:yDim, sum(j,temp2), round(runif(1, 1, yDim)))
if(beeMat[a, b]==0){
beeMat[a, b] <- beeMat[i,j]
beeMat[i,j] <- 0
}
}
# Kill the Bees:
if(beeMat[i,j]>=1){
if(runif(1, 1,100)<=probDeath){
beeMat[i,j] <- 0
}
}
# Make the Bees:
if(colMat[i,j]==1 || colMat[i,j]==2 || colMat[i,j]==3 || colMat[i,j]==4){
if(runif(1, 1,100)<=probBirth){
beeMat[i,j] <- colMat[i,j]
}
}
# Honey Bees Deposite Virus on flowers
if(beeMat[i,j]==3 & colMat[i,j]==5){
if(runif(1, 1,100)<=probDep){
colMat[i,j] <- 6
}
}
# Bumble Bees Pick up Virus
if(beeMat[i,j]==2 & colMat[i,j]==6){
if(runif(1, 1,100)<=probAquireInfected){
beeMat[i,j] <- 4
}
}
# Kill the Flowers:
if(colMat[i,j]>=5){
if(runif(1, 1,100)<=probScen){
colMat[i,j] <- 0
}
}
# Make the Flowers:
if(colMat[i,j]==0){
if(runif(1, 1,100)<=probFlow){
colMat[i,j] <- 5
}
}
} # end j loop
} # end i loop
# create names for each png:
name <- rename(t)
png(name)
# create each image to visulaize as a matrix
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=colsBees, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
} # end of time step for loop
#run ImageMagick: creates a gif of all images
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
system(my_command)
dev.off()
ResultMat <- cbind(counter[,2:5], counterCols[,6:7])
colors <- c("purple", "orange", "green", "red", "blue", "black")
matplot(y=ResultMat, type = "l", xlab = "Time",
ylab = "Frequency", lwd=3,
col=colors, ylim = c(0, 700),
lty=1, cex.lab = 1.3)
grid()
legend(0, 700,
legend=c("# S HB", "# S BB", "# I HB" ,"# I BB", "# S Flowers", "# I Flowers"),
col=colors, lty=1, cex=.8)
V <- 1:100
g1 <- 1/3
g2 <- 1/3
g3 <- 1/3
c1 <- 1
c2 <- 1
c3 <- 1
V <- 1:100
g1 <- 1/3
g2 <- 1/3
g3 <- 1/3
c1 <- 1
c2 <- 1
c3 <- 1
V <- 1:100
L1 <- c1 * V^g1
L2 <- c2 * V^g2
L3 <- c3 * V^g3
L1
Volume <- 1:100
SurfVol <- function(V=Volume,
g1 = 1/3, g2 = 1/3, g3 = 1/3,
c1 = 1, c2 = 1, c3 = 1){
# equations:
L1 <- c1 * V^g1
L2 <- c2 * V^g2
L3 <- c3 * V^g3
S <- 2(L1*L2) + 2(L1*L3) + 2(L3*L3)
Vnew <- L1*L2*L3
mat <- cbind(V, L1, L2, L3, S, Vnew)
return()
}
SurfVol()
Volume <- 1:100
SurfVol <- function(V=Volume,
g1 = 1/3, g2 = 1/3, g3 = 1/3,
c1 = 1, c2 = 1, c3 = 1){
# equations:
L1 <- c1 * V^g1
L2 <- c2 * V^g2
L3 <- c3 * V^g3
S <- 2*(L1*L2) + 2*(L1*L3) + 2*(L3*L3)
Vnew <- L1*L2*L3
mat <- cbind(V, L1, L2, L3, S, Vnew)
return()
}
SurfVol()
Volume <- 1:100
SurfVol <- function(V=Volume,
g1 = 1/3, g2 = 1/3, g3 = 1/3,
c1 = 1, c2 = 1, c3 = 1){
# equations:
L1 <- c1 * V^g1
L2 <- c2 * V^g2
L3 <- c3 * V^g3
S <- 2*(L1*L2) + 2*(L1*L3) + 2*(L3*L3)
Vnew <- L1*L2*L3
mat <- cbind(V, L1, L2, L3, S, Vnew)
return(mat)
}
SurfVol()
Volume <- 1:100
SurfVol <- function(V=Volume,
g1 = 1/3, g2 = 1/3, g3 = 1/3,
c1 = 1, c2 = 1, c3 = 1){
# equations:
L1 <- c1 * V^g1
L2 <- c2 * V^g2
L3 <- c3 * V^g3
S <- 2*(L1*L2) + 2*(L1*L3) + 2*(L3*L3)
mat <- cbind(V, L1, L2, L3, S)
return(mat)
}
SurfVol()
mat <- SurfVol()
mat <- SurfVol()
plot(mat$V, mat$S)
mat
Volume <- 1:100
SurfVol <- function(V=Volume,
g1 = 1/3, g2 = 1/3, g3 = 1/3,
c1 = 1, c2 = 1, c3 = 1){
# equations:
L1 <- c1 * V^g1
L2 <- c2 * V^g2
L3 <- c3 * V^g3
S <- 2*(L1*L2) + 2*(L1*L3) + 2*(L3*L3)
mat <- cbind(V, L1, L2, L3, S)
mat <- data.frame(mat)
return(mat)
}
mat <- SurfVol()
plot(mat$V, mat$S)
Volume <- 1:1000
SurfVol <- function(V=Volume,
g1 = 1/3, g2 = 1/3, g3 = 1/3,
c1 = 1, c2 = 1, c3 = 1){
# equations:
L1 <- c1 * V^g1
L2 <- c2 * V^g2
L3 <- c3 * V^g3
S <- 2*(L1*L2) + 2*(L1*L3) + 2*(L3*L3)
mat <- cbind(V, L1, L2, L3, S)
mat <- data.frame(mat)
return(mat)
}
mat <- SurfVol()
plot(mat$V, mat$S)
plot(log10(mat$V), log10(mat$S))
plot(mat$V, mat$S)
Volume <- 1:1000
SurfVol <- function(V=Volume,
g1 = 1/3, g2 = 1/3, g3 = 1/3,
c1 = 25, c2 = .2, c = .2){
# equations:
L1 <- c1 * V^g1
L2 <- c2 * V^g2
L3 <- c3 * V^g3
S <- 2*(L1*L2) + 2*(L1*L3) + 2*(L3*L3)
mat <- cbind(V, L1, L2, L3, S)
mat <- data.frame(mat)
return(mat)
}
mat <- SurfVol()
plot(mat$V, mat$S)
plot(mat$V, mat$S/mat$V)
plot(mat$V, mat$V/mat$S)
plot(mat$V, mat$S/mat$V)
plot(mat$V, mat$S/mat$V, ylab = "S/V", xlab="V", main = "Surface Area to Volume Ratio")
Volume <- 1:1000
SurfVol <- function(V=Volume,
g1 = 1/3, g2 = 1/3, g3 = 1/3,
c1 = 1, c2 = 1, c3 = 1){
# equations:
L1 <- c1 * V^g1
L2 <- c2 * V^g2
L3 <- c3 * V^g3
S <- 2*(L1*L2) + 2*(L1*L3) + 2*(L3*L3)
mat <- cbind(V, L1, L2, L3, S)
mat <- data.frame(mat)
return(mat)
}
mat <- SurfVol()
par(mfrow=c(1,2))
plot(mat$V, mat$S, ylab = "S", xlab="V", main = "Surface Area by Volume")
plot(mat$V, mat$S/mat$V, ylab = "S/V", xlab="V", main = "Surface Area to Volume Ratio")
Volume <- 1:10000
SurfVol <- function(V=Volume,
g1 = 1/3, g2 = 1/3, g3 = 1/3,
c1 = 1, c2 = 1, c3 = 1){
# equations:
L1 <- c1 * V^g1
L2 <- c2 * V^g2
L3 <- c3 * V^g3
S <- 2*(L1*L2) + 2*(L1*L3) + 2*(L3*L3)
mat <- cbind(V, L1, L2, L3, S)
mat <- data.frame(mat)
return(mat)
}
mat <- SurfVol()
par(mfrow=c(1,2))
plot(mat$V, mat$S, ylab = "S", xlab="V", main = "Surface Area by Volume")
plot(mat$V, mat$S/mat$V, ylab = "S/V", xlab="V", main = "Surface Area to Volume Ratio")
par(mfrow=c(1,1))
Volume <- 1:1000
SurfVol <- function(V=Volume,
g1 = 1/3, g2 = 1/3, g3 = 1/3,
c1 = 1, c2 = 1, c3 = 1){
# equations:
L1 <- c1 * V^g1
L2 <- c2 * V^g2
L3 <- c3 * V^g3
S <- 2*(L1*L2) + 2*(L1*L3) + 2*(L3*L3)
mat <- cbind(V, L1, L2, L3, S)
mat <- data.frame(mat)
return(mat)
}
mat <- SurfVol()
par(mfrow=c(1,2))
plot(mat$V, mat$S, ylab = "S", xlab="V", main = "Surface Area by Volume")
plot(mat$V, mat$S/mat$V, ylab = "S/V", xlab="V", main = "Surface Area to Volume Ratio")
par(mfrow=c(1,1))
mat <- SurfVol(g1 = .5/3, g2 = .5/3, g3 = 2/3)
plot(mat$V, mat$S, ylab = "S", xlab="V", main = "Surface Area by Volume")
mat <- SurfVol(g1 = 0, g2 = 0, g3 = 1)
plot(mat$V, mat$S, ylab = "S", xlab="V", main = "Surface Area by Volume")
3
3
mat <- SurfVol(g1 = .5/3, g2 = .5/3, g3 = 3)
plot(mat$V, mat$S, ylab = "S", xlab="V", main = "Surface Area by Volume")
mat <- SurfVol(g1 = .5/3, g2 = .5/3, g3 = 2/3)
mat <- SurfVol(g1 = .5/3, g2 = .5/3, g3 = 2/3)
plot(mat$V, mat$S, ylab = "S", xlab="V", main = "Surface Area by Volume")
mat <- SurfVol(g1 = 0, g2 = 0, g3 = 1)
plot(mat$V, mat$S, ylab = "S", xlab="V", main = "Surface Area by Volume")
mat <- SurfVol(g1 = .1, g2 = .2, g3 = .7)
plot(mat$V, mat$S, ylab = "S", xlab="V", main = "Surface Area by Volume")
mat <- SurfVol(g1 = 1, g2 = 0, g3 = 0)
plot(mat$V, mat$S, ylab = "S", xlab="V", main = "Surface Area by Volume")
mat <- SurfVol(g1 = 0, g2 = 0, g3 = 1)
plot(mat$V, mat$S, ylab = "S", xlab="V", main = "Surface Area by Volume MAX")
mat <- SurfVol(g1 = 0, g2 = 0, g3 = 0)
plot(mat$V, mat$S, ylab = "S", xlab="V", main = "Surface Area by Volume MAX")
mat <- SurfVol(g1 = .2, g2 = .2, g3 = .6)
plot(mat$V, mat$S, ylab = "S", xlab="V", main = "Surface Area by Volume MAX")
mat <- SurfVol(g1 = .1, g2 = .1, g3 = .8)
plot(mat$V, mat$S, ylab = "S", xlab="V", main = "Surface Area by Volume MAX")
mat <- SurfVol(g1 = 1/3, g2 = 1/3, g3 = 1/3)
plot(mat$V, mat$S, ylab = "S", xlab="V", main = "Surface Area by Volume MAX")
