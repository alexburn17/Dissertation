# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
for (t in 1:TimeSteps){
name <- rename(t)
png(name)
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
}
}
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
#run ImageMagick
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
for (t in 1:TimeSteps){
name <- rename(t)
png(name)
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
}
}
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
getwd()
###################################################################
# Cellualar Automata Model of Spillover HB -> Bombus
# P. Alexander Burnham
# June 22, 2018
###################################################################
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Create a matrix of numbers from 0 to 5
# 0 = Empty Space
# 1 = HB Ind.
# 2 = Bombus Ind.
# 3 = HB Col.
# 4 = Bombus Col.
# 5 = Flower
xDim <- 50
yDim <- 50
TimeSteps <- 50
#seperate matrix for (flowers, BBcolonies, HBcoloneies), (HB, BB), (InfectedYes, InfectedNo)
cols <- c(
'0' = "white",
'1' = "yellow",
'2' = "orange",
'3' = "black",
'4' = "grey",
'5' = "red"
)
beeVec <-sample(0:5,xDim*yDim,replace=T, prob = c(0.9, 0.02, 0.02, 0.02, 0.02, 0.02))
beeMat <- matrix(data = beeVec, nrow = yDim, ncol = xDim)
buff <- integer(xDim)
buff2 <- integer(xDim+2)
beeMat <- rbind(buff, beeMat, buff)
beeMat <- cbind(buff2, beeMat, buff2)
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
for (t in 1:TimeSteps){
name <- rename(t)
png(name)
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
}
}
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
#run ImageMagick
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
system(my_command)
cols <- c(
'0' = "white",
'1' = "yellow",
'2' = "orange",
'3' = "black",
'4' = "grey",
'5' = "red"
)
beeVec <-sample(0:5,xDim*yDim,replace=T, prob = c(0.9, 0.02, 0.02, 0.02, 0.02, 0.02))
beeMat <- matrix(data = beeVec, nrow = yDim, ncol = xDim)
buff <- integer(xDim)
buff2 <- integer(xDim+2)
beeMat <- rbind(buff, beeMat, buff)
beeMat <- cbind(buff2, beeMat, buff2)
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
for (t in 1:TimeSteps){
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
}
}
name <- rename(t)
png(name)
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
name <- rename(t)
name
png(name)
# Clear memory of characters:
ls()
rm(list=ls())
setwd("~/Documents/GitHub/AlgerProjects/PlantTransExp/CSV_Files")
# read in data:
plantTrans <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
# read in data, (skip over meta data in csv file: skip = 9) :
VideoData <- read.csv("PlantTransVideoData.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE, skip = 9)
PlantDF <- read.csv("plantTransPlantsDF.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
VirusDetect <- read.csv("VirusDetectionPlants.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
#Merge video data with the detection data:
VideoDataMerge <- merge(VideoData, VirusDetect, by=c("expID"), all.x=TRUE, all.y=TRUE)
library(plyr)
library(dplyr)
library(ggplot2)
plantTrans$group[plantTrans$group == "C"] <- "Bombus Only"
plantTrans$group[plantTrans$group == "T"] <- "HB + Bombus"
plantTrans$group[plantTrans$group == "PRE"] <- "Pre Experiment"
# Create a table for visitation data
Visits <- table(VideoDataMerge$expID)
expID <- as.vector(names(Visits))
visits <- as.vector(Visits)
VidDat <- data.frame(expID, visits)
#merge new visitation data with the virus DF:
plantTrans <- merge(VidDat,plantTrans,by=c("expID"),all.y=TRUE)
PlantVirusSum <- ddply(plantTrans, c("target_name", "group"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
PlantVirusSum$group <- as.factor(PlantVirusSum$group)
PlantVirusSum$group <- factor(PlantVirusSum$group, levels=c("Pre Experiment", "Bombus Only", "HB + Bombus"))
#choosing color pallet
colors <- c("olivedrab", "darkolivegreen2")
plot1 <- ggplot(PlantVirusSum, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
# remove bombus only from the data frame
PlantVirusSumReduced <- PlantVirusSum[!(PlantVirusSum$group=="Bombus Only"), ]
# make the data frame a factor again to remove the level
# and rename levels
PlantVirusSumReduced$group <- factor(PlantVirusSumReduced$group)
levels(PlantVirusSumReduced$group) <- c("HB Foraged", "Pre Experiment")
plot1 <- ggplot(PlantVirusSumReduced, aes(x=group, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x=NULL, y="% plants with virus detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Virus", labels=c("BQCV", "DWV")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 0.3)) + scale_y_continuous(labels = scales::percent)
#subset to only include plants part of the HB+Bombus group
plantTreat <- plantTrans[ which(plantTrans$group=="HB + Bombus"), ]
#Checking out by plant species
plantSpp <- ddply(plantTreat, c("target_name", "spp"), summarise,
n = length(BINYprefilter),
mean = mean(BINYprefilter, na.rm=TRUE),
sd = sd(BINYprefilter, na.rm=TRUE),
se = sd / sqrt(n))
plantSpp$spp[plantSpp$spp == "RC"] <- "Red Clover"
plantSpp$spp[plantSpp$spp == "BFT"] <- "BirdsFoot Trefoil"
plantSpp$spp[plantSpp$spp == "WC"] <- "White Clover"
#choosing color pallet
colors <- c("goldenrod", "violetred4", "snow1")
#Create a bar graph for viruses by plant species (aes= aesthetics):
plot1 <- ggplot(plantSpp, aes(x=target_name, y=mean, fill=spp)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(x="Virus", y = "% of Flowers with Virus Detected")
plot1 + theme_minimal(base_size = 17) + scale_fill_manual(values=colors, name="Plant Species:", labels=c("Birdsfoot Trefoil", "Red Clover", "White Clover")) + theme(legend.position=c(.8, .85)) + coord_cartesian(ylim = c(0, 1)) + scale_y_continuous(labels = scales::percent)
#Full Model:
#remove NAs:
#ModDat <- plantTreat[complete.cases(plantTreat), ]
ModDat <- plantTreat
##### MODEL WORKS!!!! and is legal!!!!
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp + visits, family = binomial(link="logit"))
anova(Fullmod3, test="Chisq")
?convergence
##### MODEL WORKS!!!! and is legal!!!!
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp + visits, family = binomial(link="logit"))
##### MODEL WORKS!!!! and is legal!!!!
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp + visits, family = binomial(link="logit"))
anova(Fullmod3, test="Chisq")
##### MODEL WORKS!!!! and is legal!!!!
Fullmod3 <- glm(data=ModDat, BINYprefilter ~ target_name * spp + visits, family = binomial(link="logit"))
anova(Fullmod3, test="Chisq")
setwd("~/Documents/GitHub/Dissertation/PlantTransTwo/VirusOnFlowers")
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
# setwd("~/Dissertation/PlantTransTwo/VirusOnFlowers") Sam Working Dirrectory
setwd("~/Documents/GitHub/Dissertation/PlantTransTwo/VirusOnFlowers")
###########################################################################################
# Read in Virus Data:
PlantVir <- read.table("PlantqPCRResults.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
PlantDil <- read.table("RNAdilutions_NanodropResults.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
PlantEco <- read.csv("plantsEcoDat.csv", header=TRUE, stringsAsFactors = FALSE)
PrelimClean <- function(data=ImidVirus){
# take only columns that we want:
library(dplyr)
data <- select(data, ID, target_name, Ct_mean, Ct_sd, quantity_mean)
# remove duplicate rows
data<-data[!duplicated(data), ]
# remove NTC rows from dataframe:
data<-data[!(data$ID=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$ID=="Gblock"),]
# remove NTC rows from dataframe:
data<-data[!(data$ID=="NTC"),]
return(data)
}
# cean virus data set:
PlantVir <- PrelimClean(PlantVir)
# merge eco data and dilution factors
dataFrame <- merge(PlantDil, PlantEco, by = "ID", all.x = TRUE)
# merge virus and eco and dilution data:
dataFrame2 <- merge(PlantVir, dataFrame, by = "ID")
VirusNorm <- function(number_bees = 1, data=data){
# set constant values for genome copies per bee calculations:
crude_extr <- 200
eluteRNA <- 50
GITCperbee <- 500
cDNA_eff <- 0.1
rxn_vol <- 3
#create column for total_extr_vol
total_extr_vol <- (GITCperbee * number_bees)
# create column for genome copies per bee:
data$genomeCopy <- ((((((data$quantity_mean / cDNA_eff) / rxn_vol) * data$dil.factor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
# norm_genomeCopy is 0 if NA
data$genomeCopy[is.na(data$genomeCopy)] <- 0
return(data)
}
dataFrame2 <- VirusNorm(number_bees = 1, dataFrame2)
CT_Threash <- function(data=data){
splitDF <- split(data, data$target_name)
# make DWV norm_genome_copbee 0 if Ct value is > 32.918
splitDF$DWV$genomeCopy[which(splitDF$DWV$Ct_mean > 32.918)] <- 0
splitDF$BQCV$genomeCopy[which(splitDF$BQCV$Ct_mean > 32.525)] <- 0
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$Ct_mean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$Ct_mean > 32.525, 0, 1)
# merge split dataframe back into "BombSurv" dataframe:
data <- rbind(splitDF$DWV, splitDF$BQCV)
# norm_genomeCopy is 0 if NA
data$virusBINY[is.na(data$virusBINY)] <- 0
return(data)
}
# removed errant lodas below limit of detection:
dataFrame2 <- CT_Threash(dataFrame2)
# Read in Virus Data:
dat <- read.csv("CleanPlantVirus.csv", header=TRUE, stringsAsFactors = FALSE)
# only positive values:
datPos <- dat[!dat$genomeCopy==0,]
# create data frames for each exp:
datSurv <- dat[dat$Exp=="Survey",]
datTrans <- dat[dat$Exp=="PlantTrans",]
# create data frames for each exp that are psotive:
datSurvPos <- datPos[datPos$Exp=="Survey",]
datTransPos <- datPos[datPos$Exp=="PlantTrans",]
library("plyr")
library("ggplot2")
#ddply summarize:
expPlot <- ddply(datPos, c("Exp"), summarise,
n = length(genomeCopy),
mean = mean(genomeCopy, na.rm=TRUE),
sd = sd(genomeCopy, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("blue", "grey")
#creating the figure of max gens:
plot1 <- ggplot(expPlot, aes(x=Exp, y=mean, fill=colors)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(y="Viral Load (genome copies)", x="Experiment") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(2, 2)) + scale_fill_manual(values=colors)
# print plant trans viral load data:
print(datTransPos)
write.csv(datTransPos, "datTransPos.csv")
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
# setwd("~/Dissertation/PlantTransTwo/VirusOnFlowers") Sam Working Dirrectory
setwd("~/Documents/GitHub/Dissertation/PlantTransTwo/VirusOnFlowers")
###########################################################################################
# Read in Virus Data:
PlantVir <- read.table("PlantqPCRResults.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
PlantDil <- read.table("RNAdilutions_NanodropResults.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
PlantEco <- read.csv("plantsEcoDat.csv", header=TRUE, stringsAsFactors = FALSE)
PrelimClean <- function(data=ImidVirus){
# take only columns that we want:
library(dplyr)
data <- select(data, ID, target_name, Ct_mean, Ct_sd, quantity_mean)
# remove duplicate rows
data<-data[!duplicated(data), ]
# remove NTC rows from dataframe:
data<-data[!(data$ID=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$ID=="Gblock"),]
# remove NTC rows from dataframe:
data<-data[!(data$ID=="NTC"),]
return(data)
}
# clean virus data set:
PlantVir <- PrelimClean(PlantVir)
PlantVir
# merge eco data and dilution factors
dataFrame <- merge(PlantDil, PlantEco, by = "ID", all.x = TRUE)
# merge virus and eco and dilution data:
dataFrame2 <- merge(PlantVir, dataFrame, by = "ID")
VirusNorm <- function(number_bees = 1, data=data){
# set constant values for genome copies per bee calculations:
crude_extr <- 200
eluteRNA <- 50
GITCperbee <- 500
cDNA_eff <- 0.1
rxn_vol <- 3
#create column for total_extr_vol
total_extr_vol <- (GITCperbee * number_bees)
# create column for genome copies per bee:
data$genomeCopy <- ((((((data$quantity_mean / cDNA_eff) / rxn_vol) * data$dil.factor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
# norm_genomeCopy is 0 if NA
data$genomeCopy[is.na(data$genomeCopy)] <- 0
return(data)
}
dataFrame2 <- VirusNorm(number_bees = 1, dataFrame2)
dataFrame2 <- VirusNorm(number_bees = 1, dataFrame2)
dat <- dataFrame2
# only positive values:
datPos <- dat[!dat$genomeCopy==0,]
# create data frames for each exp:
datSurv <- dat[dat$Exp=="Survey",]
datTrans <- dat[dat$Exp=="PlantTrans",]
# create data frames for each exp that are psotive:
datSurvPos <- datPos[datPos$Exp=="Survey",]
datTransPos <- datPos[datPos$Exp=="PlantTrans",]
library("plyr")
library("ggplot2")
#ddply summarize:
expPlot <- ddply(datPos, c("Exp"), summarise,
n = length(genomeCopy),
mean = mean(genomeCopy, na.rm=TRUE),
sd = sd(genomeCopy, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("blue", "grey")
#creating the figure of max gens:
plot1 <- ggplot(expPlot, aes(x=Exp, y=mean, fill=colors)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(y="Viral Load (genome copies)", x="Experiment") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(2, 2)) + scale_fill_manual(values=colors)
# print plant trans viral load data:
print(datTransPos)
View(datTransPos)
View(datTransPos)
write.csv(datTransPos, "datTransPos.csv")
# Preliminaries:
# Clear memory of characters:
rm(list=ls())
# Set Working Directory:
# setwd("~/Dissertation/PlantTransTwo/VirusOnFlowers") Sam Working Dirrectory
setwd("~/Documents/GitHub/Dissertation/PlantTransTwo/VirusOnFlowers")
###########################################################################################
# Read in Virus Data:
PlantVir <- read.table("PlantqPCRResults.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
PlantDil <- read.table("RNAdilutions_NanodropResults.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
PlantEco <- read.csv("plantsEcoDat.csv", header=TRUE, stringsAsFactors = FALSE)
PrelimClean <- function(data=ImidVirus){
# take only columns that we want:
library(dplyr)
data <- select(data, ID, target_name, Ct_mean, Ct_sd, quantity_mean)
# remove duplicate rows
data<-data[!duplicated(data), ]
# remove NTC rows from dataframe:
data<-data[!(data$ID=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$ID=="Gblock"),]
# remove NTC rows from dataframe:
data<-data[!(data$ID=="NTC"),]
return(data)
}
# clean virus data set:
PlantVir <- PrelimClean(PlantVir)
# merge eco data and dilution factors
dataFrame <- merge(PlantDil, PlantEco, by = "ID", all.x = TRUE)
# merge virus and eco and dilution data:
dataFrame2 <- merge(PlantVir, dataFrame, by = "ID")
VirusNorm <- function(number_bees = 1, data=data){
# set constant values for genome copies per bee calculations:
crude_extr <- 200
eluteRNA <- 50
GITCperbee <- 500
cDNA_eff <- 0.1
rxn_vol <- 3
#create column for total_extr_vol
total_extr_vol <- (GITCperbee * number_bees)
# create column for genome copies per bee:
data$genomeCopy <- ((((((data$quantity_mean / cDNA_eff) / rxn_vol) * data$dil.factor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
# norm_genomeCopy is 0 if NA
data$genomeCopy[is.na(data$genomeCopy)] <- 0
return(data)
}
dataFrame2 <- VirusNorm(number_bees = 1, dataFrame2)
CT_Threash <- function(data=data){
splitDF <- split(data, data$target_name)
# make DWV norm_genome_copbee 0 if Ct value is > 32.918
splitDF$DWV$genomeCopy[which(splitDF$DWV$Ct_mean > 32.918)] <- 0
splitDF$BQCV$genomeCopy[which(splitDF$BQCV$Ct_mean > 32.525)] <- 0
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$Ct_mean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$Ct_mean > 32.525, 0, 1)
# merge split dataframe back into "BombSurv" dataframe:
data <- rbind(splitDF$DWV, splitDF$BQCV)
# norm_genomeCopy is 0 if NA
data$virusBINY[is.na(data$virusBINY)] <- 0
return(data)
}
dat <- dataFrame2
# only positive values:
datPos <- dat[!dat$genomeCopy==0,]
# create data frames for each exp:
datSurv <- dat[dat$Exp=="Survey",]
datTrans <- dat[dat$Exp=="PlantTrans",]
# create data frames for each exp that are psotive:
datSurvPos <- datPos[datPos$Exp=="Survey",]
datTransPos <- datPos[datPos$Exp=="PlantTrans",]
library("plyr")
library("ggplot2")
#ddply summarize:
expPlot <- ddply(datPos, c("Exp"), summarise,
n = length(genomeCopy),
mean = mean(genomeCopy, na.rm=TRUE),
sd = sd(genomeCopy, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("blue", "grey")
#creating the figure of max gens:
plot1 <- ggplot(expPlot, aes(x=Exp, y=mean, fill=colors)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(y="Viral Load (genome copies)", x="Experiment") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(2, 2)) + scale_fill_manual(values=colors)
# print plant trans viral load data:
print(datTransPos)
